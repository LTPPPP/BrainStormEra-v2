@page "/admin/courses"
@model BrainStormEra_Razor.Pages.Admin.CoursesModel
@{
    ViewData["Title"] = "Course Management";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/admin/dashboard.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/admin/components.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
    <style>
        .courses-management {
            padding: 20px;
        }
        
        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 2px solid #e9ecef;
        }
        
        .filters-section {
            background: #f8f9fa;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 30px;
        }
        
        .filters-row {
            display: flex;
            gap: 20px;
            align-items: end;
        }
        
        .filter-group {
            flex: 1;
        }
        
        .filter-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #495057;
        }
        
        .filter-group input,
        .filter-group select {
            width: 100%;
            padding: 8px 12px;
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: 14px;
        }
        
        .filter-actions {
            display: flex;
            gap: 10px;
        }
        
        .btn-filter {
            background: #007bff;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .btn-clear {
            background: #6c757d;
            color: white;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            cursor: pointer;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }
        
        .stats-cards {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }
        
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 10px;
            border-left: 4px solid;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        
        .stat-card.total { border-left-color: #007bff; }
        .stat-card.approved { border-left-color: #28a745; }
        .stat-card.pending { border-left-color: #ffc107; }
        .stat-card.rejected { border-left-color: #dc3545; }
        .stat-card.revenue { border-left-color: #17a2b8; }
        
        .stat-number {
            font-size: 2rem;
            font-weight: bold;
            margin-bottom: 5px;
        }
        
        .stat-label {
            color: #6c757d;
            font-size: 0.9rem;
        }
        
        .courses-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }
        
        .course-card {
            background: white;
            border-radius: 10px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            transition: transform 0.2s ease;
        }
        
        .course-card:hover {
            transform: translateY(-2px);
        }
        
        .course-image {
            height: 180px;
            overflow: hidden;
            position: relative;
        }
        
        .course-image img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        
        .course-status-overlay {
            position: absolute;
            top: 10px;
            right: 10px;
        }
        
        .status-badge {
            padding: 4px 8px;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
        }
        
        .status-approved {
            background: #d4edda;
            color: #155724;
        }
        
        .status-pending {
            background: #fff3cd;
            color: #856404;
        }
        
        .status-rejected {
            background: #f8d7da;
            color: #721c24;
        }
        
        .course-content {
            padding: 20px;
        }
        
        .course-title {
            font-size: 1.1rem;
            font-weight: 600;
            margin-bottom: 8px;
            color: #333;
        }
        
        .course-instructor {
            color: #6c757d;
            font-size: 0.9rem;
            margin-bottom: 10px;
        }
        
        .course-stats {
            display: flex;
            justify-content: space-between;
            margin-bottom: 15px;
            font-size: 0.85rem;
            color: #6c757d;
        }
        
        .course-price {
            font-size: 1.2rem;
            font-weight: bold;
            color: #007bff;
            margin-bottom: 15px;
        }
        
        .course-actions {
            display: flex;
            gap: 8px;
            flex-wrap: wrap;
        }
        
        .btn-action {
            padding: 5px 10px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            gap: 4px;
        }
        
        .btn-approve {
            background: #28a745;
            color: white;
        }
        
        .btn-reject {
            background: #ffc107;
            color: #212529;
        }
        
        .btn-ban {
            background: #dc3545;
            color: white;
        }
        
        .btn-delete {
            background: #6c757d;
            color: white;
        }
        
        .pagination {
            display: flex;
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin-top: 30px;
        }
        
        .pagination a,
        .pagination span {
            padding: 8px 12px;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            text-decoration: none;
            color: #007bff;
        }
        
        .pagination .current {
            background: #007bff;
            color: white;
            border-color: #007bff;
        }
        
        .no-courses {
            text-align: center;
            padding: 60px 20px;
            color: #6c757d;
        }
    </style>
}

<div class="courses-management">
    <!-- Page Header -->
    <div class="page-header">
        <div>
            <h1><i class="fas fa-book"></i> Course Management</h1>
            <p class="text-muted">Manage courses, approvals, and content moderation</p>
        </div>
        <div>
            <a href="/admin" class="btn-filter">
                <i class="fas fa-arrow-left"></i> Back to Dashboard
            </a>
        </div>
    </div>

    <!-- Statistics Cards -->
    <div class="stats-cards">
        <div class="stat-card total">
            <div class="stat-number">@Model.CoursesData.TotalCourses</div>
            <div class="stat-label">Total Courses</div>
        </div>
        <div class="stat-card approved">
            <div class="stat-number">@Model.CoursesData.ApprovedCourses</div>
            <div class="stat-label">Approved</div>
        </div>
        <div class="stat-card pending">
            <div class="stat-number">@Model.CoursesData.PendingCourses</div>
            <div class="stat-label">Pending Review</div>
        </div>
        <div class="stat-card rejected">
            <div class="stat-number">@Model.CoursesData.RejectedCourses</div>
            <div class="stat-label">Rejected</div>
        </div>
        <div class="stat-card revenue">
            <div class="stat-number">$@Model.CoursesData.TotalRevenue.ToString("N0")</div>
            <div class="stat-label">Total Revenue</div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="filters-section">
        <form method="get" asp-page="/Admin/Courses">
            <div class="filters-row">
                <div class="filter-group">
                    <label for="SearchQuery">Search Courses</label>
                    <input type="text" id="SearchQuery" name="SearchQuery" value="@Model.SearchQuery" 
                           placeholder="Search by course name, instructor, or description..." />
                </div>
                <div class="filter-group">
                    <label for="CategoryFilter">Category Filter</label>
                    <select id="CategoryFilter" name="CategoryFilter">
                        <option value="">All Categories</option>
                        <option value="programming" selected="@(Model.CategoryFilter == "programming")">Programming</option>
                        <option value="design" selected="@(Model.CategoryFilter == "design")">Design</option>
                        <option value="business" selected="@(Model.CategoryFilter == "business")">Business</option>
                        <option value="marketing" selected="@(Model.CategoryFilter == "marketing")">Marketing</option>
                        <option value="language" selected="@(Model.CategoryFilter == "language")">Language</option>
                    </select>
                </div>
                <div class="filter-group">
                    <label for="PageSize">Items per page</label>
                    <select id="PageSize" name="PageSize">
                        <option value="12" selected="@(Model.PageSize == 12)">12</option>
                        <option value="24" selected="@(Model.PageSize == 24)">24</option>
                        <option value="48" selected="@(Model.PageSize == 48)">48</option>
                    </select>
                </div>
                <div class="filter-actions">
                    <button type="submit" class="btn-filter">
                        <i class="fas fa-search"></i> Search
                    </button>
                    <a href="/admin/courses" class="btn-clear">
                        <i class="fas fa-times"></i> Clear
                    </a>
                </div>
            </div>
        </form>
    </div>

    <!-- Courses Grid -->
    @if (Model.CoursesData.Courses.Any())
    {
        <div class="courses-grid">
            @foreach (var course in Model.CoursesData.Courses)
            {
                <div class="course-card">
                    <div class="course-image">
                        <img src="@course.CoursePicture" alt="@course.CourseName"
                             onerror="this.onerror=null; this.src='/SharedMedia/defaults/default-course.svg';" />
                        <div class="course-status-overlay">
                            <span class="status-badge @course.StatusBadgeClass">@course.StatusText</span>
                        </div>
                    </div>
                    <div class="course-content">
                        <h3 class="course-title">@course.CourseName</h3>
                        <div class="course-instructor">
                            <i class="fas fa-user"></i> @course.InstructorName
                        </div>
                        <div class="course-stats">
                            <span><i class="fas fa-users"></i> @course.EnrollmentCount students</span>
                            <span><i class="fas fa-star"></i> @course.AverageRating.ToString("F1")</span>
                            <span><i class="fas fa-comments"></i> @course.ReviewCount reviews</span>
                        </div>
                        <div class="course-price">@course.PriceText</div>
                        <div class="course-actions">
                            @if (!course.IsApproved)
                            {
                                <button type="button" class="btn-action btn-approve" 
                                        onclick="updateCourseStatus('@course.CourseId', true)">
                                    <i class="fas fa-check"></i> Approve
                                </button>
                                <button type="button" class="btn-action btn-reject" 
                                        onclick="updateCourseStatus('@course.CourseId', false)">
                                    <i class="fas fa-times"></i> Reject
                                </button>
                            }
                            else
                            {
                                <button type="button" class="btn-action btn-reject" 
                                        onclick="updateCourseStatus('@course.CourseId', false)">
                                    <i class="fas fa-times"></i> Unapprove
                                </button>
                            }
                            <button type="button" class="btn-action btn-ban" 
                                    onclick="banCourse('@course.CourseId', '@course.CourseName')">
                                <i class="fas fa-ban"></i> Ban
                            </button>
                            <button type="button" class="btn-action btn-delete" 
                                    onclick="deleteCourse('@course.CourseId', '@course.CourseName')">
                                <i class="fas fa-trash"></i> Delete
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Pagination -->
        @if (Model.CoursesData.TotalPages > 1)
        {
            <div class="pagination">
                @if (Model.CoursesData.HasPreviousPage)
                {
                    <a href="?SearchQuery=@Model.SearchQuery&CategoryFilter=@Model.CategoryFilter&PageSize=@Model.PageSize&CurrentPage=@(Model.CurrentPage - 1)">
                        <i class="fas fa-chevron-left"></i> Previous
                    </a>
                }

                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.CoursesData.TotalPages, Model.CurrentPage + 2); i++)
                {
                    @if (i == Model.CurrentPage)
                    {
                        <span class="current">@i</span>
                    }
                    else
                    {
                        <a href="?SearchQuery=@Model.SearchQuery&CategoryFilter=@Model.CategoryFilter&PageSize=@Model.PageSize&CurrentPage=@i">@i</a>
                    }
                }

                @if (Model.CoursesData.HasNextPage)
                {
                    <a href="?SearchQuery=@Model.SearchQuery&CategoryFilter=@Model.CategoryFilter&PageSize=@Model.PageSize&CurrentPage=@(Model.CurrentPage + 1)">
                        Next <i class="fas fa-chevron-right"></i>
                    </a>
                }
            </div>
        }
    }
    else
    {
        <div class="no-courses">
            <i class="fas fa-book fa-3x text-muted mb-3"></i>
            <h5>No courses found</h5>
            <p>Try adjusting your search criteria or filters.</p>
        </div>
    }
</div>

@section Scripts {
    <script src="~/js/admin/shared-functions.js" asp-append-version="true"></script>
    <script>
        function updateCourseStatus(courseId, isApproved) {
            const action = isApproved ? 'approve' : 'reject';
            if (confirm(`Are you sure you want to ${action} this course?`)) {
                fetch('/admin/courses?handler=UpdateCourseStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ courseId: courseId, isApproved: isApproved })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating course status');
                });
            }
        }

        function banCourse(courseId, courseName) {
            if (confirm(`Are you sure you want to ban the course "${courseName}"?`)) {
                fetch('/admin/courses?handler=BanCourse', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ courseId: courseId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while banning course');
                });
            }
        }

        function deleteCourse(courseId, courseName) {
            if (confirm(`Are you sure you want to delete the course "${courseName}"? This action cannot be undone.`)) {
                fetch('/admin/courses?handler=DeleteCourse', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ courseId: courseId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting course');
                });
            }
        }
    </script>
} 