@page "/admin/users"
@model BrainStormEra_Razor.Pages.Admin.UsersModel
@{
    ViewData["Title"] = "User Management";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/global.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/pages/Admin/users.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
}

<div class="users-management">
    <!-- Page Header -->
    @{
        var pageHeaderModel = new PageHeaderViewModel
        {
            Title = "User Management",
            Description = "Manage system users, roles, and permissions",
            Icon = "fa-users",
            Actions = new List<PageActionViewModel>
            {
                new PageActionViewModel
                {
                    Text = "Back to Dashboard",
                    Url = "/admin",
                    Icon = "fa-arrow-left",
                    CssClass = "btn-filter"
                }
            }
        };
    }
    @await Html.PartialAsync("Admin/_PageHeader", pageHeaderModel)

    <!-- Statistics Cards -->
    @{
        var userStatsModel = new List<StatCardViewModel>
        {
            new StatCardViewModel
            {
                Value = Model.UsersData.TotalUsers.ToString(),
                Label = "Total Users",
                CssClass = "total"
            },
            new StatCardViewModel
            {
                Value = Model.UsersData.TotalAdmins.ToString(),
                Label = "Admins",
                CssClass = "admins"
            },
            new StatCardViewModel
            {
                Value = Model.UsersData.TotalInstructors.ToString(),
                Label = "Instructors",
                CssClass = "instructors"
            },
            new StatCardViewModel
            {
                Value = Model.UsersData.TotalLearners.ToString(),
                Label = "Learners",
                CssClass = "learners"
            },
            new StatCardViewModel
            {
                Value = Model.UsersData.BannedUsers.ToString(),
                Label = "Banned Users",
                CssClass = "banned"
            }
        };
    }
    <div class="stats-cards">
        @await Html.PartialAsync("Admin/_StatsCards", userStatsModel)
    </div>

    <!-- Filters Section -->
    @{
        var filtersModel = new FilterSectionViewModel
        {
            ActionUrl = "/admin/users",
            ClearUrl = "/admin/users",
            Filters = new List<FilterViewModel>
            {
                new FilterViewModel
                {
                    Name = "SearchQuery",
                    Label = "Search Users",
                    Type = FilterType.Text,
                    Value = Model.SearchQuery,
                    Placeholder = "Search by name, email, or username..."
                },
                new FilterViewModel
                {
                    Name = "RoleFilter",
                    Label = "Role Filter",
                    Type = FilterType.Select,
                    Value = Model.RoleFilter,
                    Options = new List<FilterOptionViewModel>
                    {
                        new FilterOptionViewModel { Value = "", Text = "All Roles" },
                        new FilterOptionViewModel { Value = "admin", Text = "Admin" },
                        new FilterOptionViewModel { Value = "instructor", Text = "Instructor" },
                        new FilterOptionViewModel { Value = "learner", Text = "Learner" }
                    }
                },
                new FilterViewModel
                {
                    Name = "StatusFilter",
                    Label = "Status Filter",
                    Type = FilterType.Select,
                    Value = Model.StatusFilter,
                    Options = new List<FilterOptionViewModel>
                    {
                        new FilterOptionViewModel { Value = "", Text = "All Status" },
                        new FilterOptionViewModel { Value = "active", Text = "Active Users" },
                        new FilterOptionViewModel { Value = "banned", Text = "Banned Users" }
                    }
                },
                new FilterViewModel
                {
                    Name = "PageSize",
                    Label = "Items per page",
                    Type = FilterType.Select,
                    Value = Model.PageSize.ToString(),
                    Options = new List<FilterOptionViewModel>
                    {
                        new FilterOptionViewModel { Value = "10", Text = "10" },
                        new FilterOptionViewModel { Value = "25", Text = "25" },
                        new FilterOptionViewModel { Value = "50", Text = "50" }
                    }
                }
            }
        };
    }
    @await Html.PartialAsync("Admin/_FilterSection", filtersModel)

    <!-- Users Table -->
    @{
        var paginationModel = new PaginationViewModel
        {
            CurrentPage = Model.CurrentPage,
            TotalPages = Model.UsersData.TotalPages,
            PageSize = Model.PageSize,
            BaseUrl = "/admin/users",
            QueryParameters = new Dictionary<string, string?>
            {
                { "SearchQuery", Model.SearchQuery },
                { "RoleFilter", Model.RoleFilter },
                { "StatusFilter", Model.StatusFilter },
                { "PageSize", Model.PageSize.ToString() }
            }
        };
    }
    
    <div class="users-table">
        <div class="table-header">
            <h3 class="table-title">Users List (@Model.UsersData.TotalUsers total)</h3>
        </div>
        
        @if (Model.UsersData.Users.Any())
        {
            <div class="table-responsive">
                <table>
                    <thead>
                        <tr>
                            <th>User</th>
                            <th>Role</th>
                            <th>Status</th>
                            <th>Points</th>
                            <th>Join Date</th>
                            <th>Last Login</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var user in Model.UsersData.Users)
                        {
                            <tr>
                                <td>
                                    <div class="user-info">
                                        <img src="@user.UserImage" alt="@user.FullName" class="user-avatar"
                                             onerror="this.onerror=null; this.src='/SharedMedia/defaults/default-avatar.svg';" />
                                        <div class="user-details">
                                            <h6>@user.FullName</h6>
                                            <small>@user.UserEmail</small>
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="role-badge @(user.UserRole.ToLower())">
                                        <i class="fas @(user.UserRole.ToLower() == "admin" ? "fa-crown" : user.UserRole.ToLower() == "instructor" ? "fa-chalkboard-teacher" : "fa-user-graduate")"></i>
                                        @user.UserRole
                                    </span>
                                </td>
                                <td>
                                    <span class="status-badge @(user.IsBanned ? "status-banned" : "status-active")">
                                        <i class="fas @(user.IsBanned ? "fa-ban" : "fa-check-circle")"></i>
                                        @user.StatusText
                                    </span>
                                </td>
                                <td>
                                    <span class="points-display">
                                        <i class="fas fa-coins"></i>
                                        @((user.PaymentPoint ?? 0).ToString("N0"))
                                    </span>
                                </td>
                                <td>@user.AccountCreatedAt.ToString("MMM dd, yyyy")</td>
                                <td>@(user.LastLoginDate?.ToString("MMM dd, yyyy") ?? "Never")</td>
                                <td>
                                    <div class="action-buttons">
                                        <a href="/admin/users/@user.UserId" class="btn-action btn-view">
                                            <i class="fas fa-eye"></i> View
                                        </a>
                                        <button type="button" class="btn-action btn-point" 
                                                onclick="showPointModal('@user.UserId', '@user.FullName', @(user.PaymentPoint ?? 0))">
                                            <i class="fas fa-coins"></i> Points
                                        </button>
                                        @if (user.IsBanned)
                                        {
                                            <button type="button" class="btn-action btn-unban" 
                                                    onclick="updateUserStatus('@user.UserId', false)">
                                                <i class="fas fa-unlock"></i> Unban
                                            </button>
                                        }
                                        else
                                        {
                                            <button type="button" class="btn-action btn-ban" 
                                                    onclick="updateUserStatus('@user.UserId', true)">
                                                <i class="fas fa-ban"></i> Ban
                                            </button>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>

            <!-- Pagination -->
            @await Html.PartialAsync("Admin/_Pagination", paginationModel)
        }
        else
        {
            <div class="no-users">
                <i class="fas fa-users fa-3x"></i>
                <h5>No users found</h5>
                <p>Try adjusting your search criteria or filters.</p>
            </div>
        }
    </div>
</div>

<!-- Point Management Modal -->
<div id="pointModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3>Manage User Points</h3>
            <span class="close" onclick="closePointModal()">&times;</span>
        </div>
        <div class="modal-body">
            <div class="current-points">
                <strong>Current Points: <span id="currentPoints">0</span></strong>
            </div>
            <div class="point-input-group">
                <label for="modalPointsAmount">Points Amount:</label>
                <input type="number" id="modalPointsAmount" min="1" step="1" value="100" />
            </div>
        </div>
        <div class="modal-actions">
            <button type="button" class="btn-modal-success" onclick="processPointUpdate('add')">
                <i class="fas fa-plus"></i> Add Points
            </button>
            <button type="button" class="btn-modal-warning" onclick="processPointUpdate('subtract')">
                <i class="fas fa-minus"></i> Subtract Points
            </button>
            <button type="button" class="btn-modal-cancel" onclick="closePointModal()">Cancel</button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/admin/shared-functions.js" asp-append-version="true"></script>
    <script>
        let currentUserId = '';
        let currentUserName = '';

        function updateUserStatus(userId, isBanned) {
            const action = isBanned ? 'ban' : 'unban';
            if (confirm(`Are you sure you want to ${action} this user?`)) {
                fetch('/admin/users?handler=UpdateUserStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ userId: userId, isBanned: isBanned })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating user status');
                });
            }
        }

        function showPointModal(userId, userName, currentPoints) {
            currentUserId = userId;
            currentUserName = userName;
            document.getElementById('currentPoints').textContent = currentPoints.toLocaleString();
            document.getElementById('modalPointsAmount').value = 100;
            document.getElementById('pointModal').style.display = 'block';
        }

        function closePointModal() {
            document.getElementById('pointModal').style.display = 'none';
            currentUserId = '';
            currentUserName = '';
        }

        function processPointUpdate(action) {
            const pointsInput = document.getElementById('modalPointsAmount');
            const points = parseInt(pointsInput.value);

            if (!points || points <= 0) {
                alert('Please enter a valid points amount');
                return;
            }

            const pointsChange = action === 'add' ? points : -points;
            const actionText = action === 'add' ? 'add' : 'subtract';

            if (confirm(`Are you sure you want to ${actionText} ${points} points for ${currentUserName}?`)) {
                fetch('/admin/users?handler=UpdateUserPoints', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ userId: currentUserId, pointsChange: pointsChange })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        closePointModal();
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating user points');
                });
            }
        }

        // Close modal when clicking outside
        window.onclick = function(event) {
            const modal = document.getElementById('pointModal');
            if (event.target == modal) {
                closePointModal();
            }
        }
    </script>
} 