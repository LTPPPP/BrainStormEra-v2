@page "/admin/users/{userId}"
@model BrainStormEra_Razor.Pages.Admin.UserDetailModel
@{
    ViewData["Title"] = "User Details";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/global.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/pages/Admin/user-detail.css" asp-append-version="true" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css" />
}

<div class="user-detail-container">
    <!-- Success/Error Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            <i class="fas fa-check-circle me-2"></i>
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    
    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <i class="fas fa-exclamation-circle me-2"></i>
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Page Header -->
    <div class="page-header">
        <div>
            <h1><i class="fas fa-user me-2"></i>User Details</h1>
            <p class="text-muted">View detailed information about the user</p>
        </div>
    </div>

    @if (Model.UserDetail != null)
    {
        <div class="user-profile-card">
            <!-- User Header -->
            <div class="user-header">
                <img src="@(!string.IsNullOrEmpty(Model.UserDetail.UserImage) ? Model.UserDetail.UserImage : "/SharedMedia/defaults/default-avatar.svg")" 
                     alt="@Model.UserDetail.FullName" class="user-avatar-large"
                     onerror="this.onerror=null; this.src='/SharedMedia/defaults/default-avatar.svg';" />
                
                <div class="user-basic-info">
                    <h2>@Model.UserDetail.FullName</h2>
                    <div class="user-email">@Model.UserDetail.UserEmail</div>
                    <div class="user-badges">
                        <span class="badge badge-role">
                            <i class="fas @(Model.UserDetail.UserRole.ToLower() == "admin" ? "fa-crown" : Model.UserDetail.UserRole.ToLower() == "instructor" ? "fa-chalkboard-teacher" : "fa-user-graduate")"></i>
                            @Model.UserDetail.UserRole
                        </span>
                        <span class="badge @(Model.UserDetail.IsBanned ? "badge-status-banned" : "badge-status-active")">
                            <i class="fas @(Model.UserDetail.IsBanned ? "fa-ban" : "fa-check-circle")"></i>
                            @(Model.UserDetail.IsBanned ? "Banned" : "Active")
                        </span>
                    </div>
                </div>
            </div>

            <!-- User Information Grid -->
            <div class="info-grid">
                <!-- Personal Information -->
                <div class="info-section">
                    <h5><i class="fas fa-user"></i>Personal Information</h5>
                    <div class="info-item">
                        <span class="info-label">Full Name:</span>
                        <span class="info-value">@Model.UserDetail.FullName</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Username:</span>
                        <span class="info-value">@Model.UserDetail.Username</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Email:</span>
                        <span class="info-value">@Model.UserDetail.UserEmail</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Phone:</span>
                        <span class="info-value">@(Model.UserDetail.PhoneNumber ?? "Not provided")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Address:</span>
                        <span class="info-value">@(Model.UserDetail.UserAddress ?? "Not provided")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Date of Birth:</span>
                        <span class="info-value">@(Model.UserDetail.DateOfBirth?.ToString("MMM dd, yyyy") ?? "Not provided")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Gender:</span>
                        <span class="info-value">@(Model.UserDetail.Gender == 1 ? "Male" : Model.UserDetail.Gender == 2 ? "Female" : Model.UserDetail.Gender == 3 ? "Other" : "Not specified")</span>
                    </div>
                </div>

                <!-- Account Information -->
                <div class="info-section">
                    <h5><i class="fas fa-cog"></i>Account Information</h5>
                    <div class="info-item">
                        <span class="info-label">User ID:</span>
                        <span class="info-value">@Model.UserDetail.UserId</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Role:</span>
                        <span class="info-value">@Model.UserDetail.UserRole</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Status:</span>
                        <span class="info-value">@(Model.UserDetail.IsBanned ? "Banned" : "Active")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Join Date:</span>
                        <span class="info-value">@Model.UserDetail.AccountCreatedAt.ToString("MMM dd, yyyy")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Last Login:</span>
                        <span class="info-value">@(Model.UserDetail.LastLoginDate?.ToString("MMM dd, yyyy HH:mm") ?? "Never")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Payment Points:</span>
                        <span class="info-value">
                            <strong>
                                <i class="fas fa-coins"></i>
                                @(Model.UserDetail.PaymentPoint?.ToString("N0") ?? "0")
                            </strong>
                        </span>
                    </div>
                </div>

                <!-- Point Management -->
                <div class="info-section">
                    <h5><i class="fas fa-coins"></i>Point Management</h5>
                    <div class="point-actions">
                        <div class="point-input-group">
                            <input type="number" id="pointsAmount" min="1" step="1" value="100" class="form-control" placeholder="Enter points" />
                        </div>
                        <div class="point-buttons">
                            <button type="button" class="btn btn-success btn-sm" onclick="updateUserPoints('@Model.UserId', 'add')">
                                <i class="fas fa-plus"></i> Add Points
                            </button>
                            <button type="button" class="btn btn-warning btn-sm" onclick="updateUserPoints('@Model.UserId', 'subtract')">
                                <i class="fas fa-minus"></i> Subtract Points
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Bank Information -->
                <div class="info-section">
                    <h5><i class="fas fa-university"></i>Bank Information</h5>
                    <div class="info-item">
                        <span class="info-label">Bank Name:</span>
                        <span class="info-value">@(Model.UserDetail.BankName ?? "Not provided")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Account Holder:</span>
                        <span class="info-value">@(Model.UserDetail.AccountHolderName ?? "Not provided")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Account Number:</span>
                        <span class="info-value">@(Model.UserDetail.BankAccountNumber ?? "Not provided")</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Bank Status:</span>
                        <span class="info-value">
                            @if (!string.IsNullOrEmpty(Model.UserDetail.BankName) && !string.IsNullOrEmpty(Model.UserDetail.BankAccountNumber))
                            {
                                <span class="badge badge-status-active">
                                    <i class="fas fa-check-circle"></i>
                                    Verified
                                </span>
                            }
                            else
                            {
                                <span class="badge badge-status-banned">
                                    <i class="fas fa-times-circle"></i>
                                    Not Set
                                </span>
                            }
                        </span>
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="action-buttons">
                <a href="/admin/users" class="btn btn-back">
                    <i class="fas fa-arrow-left"></i>Back to Users
                </a>
                
                @if (Model.UserDetail.IsBanned)
                {
                    <button type="button" class="btn btn-unban" onclick="updateUserStatus('@Model.UserId', false)">
                        <i class="fas fa-unlock"></i>Unban User
                    </button>
                }
                else
                {
                    <button type="button" class="btn btn-ban" onclick="updateUserStatus('@Model.UserId', true)">
                        <i class="fas fa-ban"></i>Ban User
                    </button>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alert alert-warning">
            <i class="fas fa-exclamation-triangle me-2"></i>
            User not found or you don't have permission to view this user's details.
        </div>
    }
</div>

@section Scripts {
    <script>
        function updateUserStatus(userId, isBanned) {
            const action = isBanned ? 'ban' : 'unban';
            if (confirm(`Are you sure you want to ${action} this user?`)) {
                fetch('/admin/users/' + userId + '?handler=UpdateUserStatus', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ userId: userId, isBanned: isBanned })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating user status');
                });
            }
        }

        function updateUserPoints(userId, action) {
            const pointsInput = document.getElementById('pointsAmount');
            const points = parseInt(pointsInput.value);

            if (!points || points <= 0) {
                alert('Please enter a valid points amount');
                return;
            }

            const pointsChange = action === 'add' ? points : -points;
            const actionText = action === 'add' ? 'add' : 'subtract';

            if (confirm(`Are you sure you want to ${actionText} ${points} points?`)) {
                fetch('/admin/users/' + userId + '?handler=UpdateUserPoints', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ userId: userId, pointsChange: pointsChange })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        location.reload();
                    } else {
                        alert('Error: ' + data.message);
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while updating user points');
                });
            }
        }
    </script>
}
