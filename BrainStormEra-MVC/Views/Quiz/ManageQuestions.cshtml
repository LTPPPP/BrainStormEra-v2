@model DataAccessLayer.Models.ViewModels.QuestionListViewModel
@{
    ViewData["Title"] = "Manage Questions - " + Model.QuizName;
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - BrainStormEra</title>
    <meta name="description" content="Manage questions for @Model.QuizName quiz - BrainStormEra">
    <link rel="icon" type="image/x-icon" href="~/SharedMedia/logo/logowithoutbackground.png" sizes="48x48">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/global.css">
    <link rel="stylesheet" href="~/css/layouts/base.css">
    <link rel="stylesheet" href="~/css/components/header.css">
    <link rel="stylesheet" href="~/css/components/loader.css">
    <link rel="stylesheet" href="~/css/pages/Course/create-course.css">
    <link rel="stylesheet" href="~/css/components/page-header-themes.css">
    <link rel="stylesheet" href="~/css/components/footer.css">
    <link rel="stylesheet" href="~/css/pages/HomePage/enhanced-home.css">
    <link rel="stylesheet" href="~/css/components/chatbot.css">
    <!-- Toast notifications CSS -->
    <link rel="stylesheet" href="~/css/components/toast-notifications.css">
    
    <!-- User meta tags for chatbot -->
    @if (Context.Session.GetString("UserId") != null)
    {
        <meta name="user-id" content="@Context.Session.GetString("UserId")">
        <meta name="user-role" content="@Context.Session.GetString("UserRole")">
        <meta name="user-name" content="@Context.Session.GetString("UserName")">
    }
</head>

<body>
    <!-- Display toast notifications from TempData -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div data-toast-success="@TempData["SuccessMessage"]" style="display:none;"></div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div data-toast-error="@TempData["ErrorMessage"]" style="display:none;"></div>
    }

    <!-- Page Loader -->
    <div class="page-loader">
        <div class="loader"></div>
    </div>

    <!-- Include Header partial view -->
    @await Html.PartialAsync("~/Views/Shared/Header/_Header.cshtml")

    <!-- Page Header -->
    <div class="page-header create-page">
        <div class="container">
            <div class="row">
                <div class="col-12 text-center">
                    <h1 class="mb-3">
                        <i class="fas fa-cog me-3"></i>
                        Manage Questions
                    </h1>
                    <p class="lead">Quiz: @Model.QuizName</p>
                    <div class="mt-4">
                        <span class="badge bg-light text-dark fs-6 me-3">
                            <i class="fas fa-book me-1"></i> @Model.CourseName
                        </span>
                        <span class="badge bg-light text-dark fs-6">
                            <i class="fas fa-question-circle me-1"></i> @Model.Questions.Count questions
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="create-course-container">
        <!-- Action Bar -->
        <div class="row mb-4">
            <div class="col-md-6">
                <a href="@Url.Action("Create", "Question", new { quizId = Model.QuizId })" 
                   class="btn btn-primary">
                    <i class="fas fa-plus me-2"></i>Add New Question
                </a>
                <a href="/Quiz/Edit/@Model.QuizId" class="btn btn-outline-primary ms-2">
                    <i class="fas fa-edit me-2"></i>Update Quiz
                </a>
            </div>
            <div class="col-md-6 text-end">
                <a href="@Url.Action("Details", "Course", new { id = Model.CourseId })#curriculum" 
                   class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Back to Course
                </a>
            </div>
        </div>

        <!-- Questions List -->
        <div class="form-section">
            <h3 class="section-title">
                <i class="fas fa-list me-2"></i>
                Questions List
            </h3>
            <p class="text-muted mb-4">Manage and organize your quiz questions</p>

            @if (Model.Questions.Any())
            {
                <div class="table-responsive">
                    <table class="table table-hover">
                        <thead class="table-light">
                            <tr>
                                <th width="5%">#</th>
                                <th width="40%">Question</th>
                                <th width="15%">Type</th>
                                <th width="10%">Points</th>
                                <th width="10%">Options</th>
                                <th width="15%">Created</th>
                                <th width="15%">Actions</th>
                            </tr>
                        </thead>
                        <tbody id="questionsTableBody">
                            @foreach (var question in Model.Questions.OrderBy(q => q.QuestionOrder))
                            {
                                <tr data-question-id="@question.QuestionId">
                                    <td>
                                        <span class="question-order">@question.QuestionOrder</span>
                                    </td>
                                    <td>
                                        <div class="question-preview">
                                            @(question.QuestionText.Length > 80 ? question.QuestionText.Substring(0, 80) + "..." : question.QuestionText)
                                        </div>
                                    </td>
                                    <td>
                                        <span class="badge bg-secondary">
                                            @switch (question.QuestionType.ToLower())
                                            {
                                                case "multiple_choice":
                                                    <i class="fas fa-list me-1"></i>
                                                    <text>Multiple Choice</text>
                                                    break;
                                            }
                                        </span>
                                    </td>
                                    <td>
                                        <span class="fw-bold">@question.Points</span>
                                    </td>
                                    <td>
                                        @if (question.QuestionType.ToLower() == "multiple_choice")
                                        {
                                            <span class="text-muted">@question.AnswerOptionsCount options</span>
                                        }
                                    </td>
                                    <td>
                                        <small class="text-muted">
                                            @question.QuestionCreatedAt.ToString("MMM dd, yyyy")
                                        </small>
                                    </td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="@Url.Action("Edit", "Question", new { id = question.QuestionId })" 
                                               class="btn btn-sm btn-outline-primary" title="Edit Question">
                                                <i class="fas fa-edit"></i>
                                            </a>
                                            <button type="button" class="btn btn-sm btn-outline-success" 
                                                    onclick="duplicateQuestion('@question.QuestionId')" title="Duplicate Question">
                                                <i class="fas fa-copy"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-outline-danger" 
                                                    onclick="deleteQuestion('@question.QuestionId', '@question.QuestionText.Substring(0, Math.Min(question.QuestionText.Length, 30))')" 
                                                    title="Delete Question">
                                                <i class="fas fa-trash"></i>
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
@* 
                <!-- Reorder Instructions -->
                <div class="alert alert-info mt-3">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>Tip:</strong> You can drag and drop questions to reorder them. Changes will be saved automatically.
                </div> *@
            }
            else
            {
                <div class="empty-state text-center py-5">
                    <i class="fas fa-question-circle fa-3x text-muted mb-3"></i>
                    <h4>No Questions Yet</h4>
                    <p class="text-muted">Start building your quiz by adding your first question.</p>
                    <a href="@Url.Action("Create", "Question", new { quizId = Model.QuizId })" 
                       class="btn btn-primary">
                        <i class="fas fa-plus me-2"></i>Add First Question
                    </a>
                </div>
            }
        </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteQuestionModal" tabindex="-1" aria-labelledby="deleteQuestionModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteQuestionModalLabel">Delete Question</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this question?</p>
                    <p><strong id="questionToDelete"></strong></p>
                    <p class="text-danger">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete Question</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    @await Html.PartialAsync("~/Views/Shared/Footer/_Footer.cshtml")

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/components/toast-notifications.js"></script>
    <script src="~/js/components/loader.js"></script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            let questionToDeleteId = null;

            // Delete question function
            window.deleteQuestion = function(questionId, questionText) {
                questionToDeleteId = questionId;
                document.getElementById('questionToDelete').textContent = questionText;
                const modal = new bootstrap.Modal(document.getElementById('deleteQuestionModal'));
                modal.show();
            };

            // Duplicate question function
            window.duplicateQuestion = function(questionId) {
                fetch(`/Question/Duplicate/${questionId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    }
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast('Question duplicated successfully!', 'success');
                        setTimeout(() => location.reload(), 1000);
                    } else {
                        showToast(data.message || 'Failed to duplicate question', 'error');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    showToast('An error occurred while duplicating the question', 'error');
                });
            };

            // Confirm delete
            document.getElementById('confirmDeleteBtn').addEventListener('click', function() {
                if (questionToDeleteId) {
                    fetch(`/Question/Delete/${questionToDeleteId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast('Question deleted successfully!', 'success');
                            setTimeout(() => location.reload(), 1000);
                        } else {
                            showToast(data.message || 'Failed to delete question', 'error');
                        }
                        bootstrap.Modal.getInstance(document.getElementById('deleteQuestionModal')).hide();
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        showToast('An error occurred while deleting the question', 'error');
                        bootstrap.Modal.getInstance(document.getElementById('deleteQuestionModal')).hide();
                    });
                }
            });

            // Show toast notification
            function showToast(message, type) {
                // This function should match your existing toast notification system
                console.log(`${type}: ${message}`);
            }
        });

        // Hide preloader when page is loaded
        window.addEventListener('load', function () {
            document.querySelector('.page-loader').classList.add('loaded');
            setTimeout(() => {
                document.querySelector('.page-loader').style.display = 'none';
            }, 500);
        });
    </script>

    <!-- Add antiforgery token for AJAX requests -->
    @Html.AntiForgeryToken()

    <!-- Chatbot for authenticated users -->
    @if (Context.Session.GetString("UserId") != null)
    {
        @await Html.PartialAsync("~/Views/Shared/_Chatbot.cshtml")
        @Html.AntiForgeryToken()
        <script src="~/js/components/chatbot.js"></script>
    }
</body>

</html>
