@model CoursePlayerViewModel
@{
    ViewData["Title"] = Model.CourseName + " - Course Learning";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Styles {
    <link rel="stylesheet" href="~/css/pages/Learning/course-player.css">
}

<!-- Course Header -->
<div class="course-header">
    <div class="container">
        <div class="course-header-content">
            <div class="course-info">
                <div class="course-image-container">
                    @if (!string.IsNullOrEmpty(Model.CourseImage))
                    {
                        <img src="@Model.CourseImage" 
                             alt="@Model.CourseName" 
                             class="course-image"
                             onerror="this.src='/SharedMedia/defaults/default-course.svg'; this.style.opacity='0.7'; this.style.border='2px dashed #d1d5db';" />
                    }
                    else
                    {
                        <img src="/SharedMedia/defaults/default-course.svg" 
                             alt="@Model.CourseName" 
                             class="course-image default-image" />
                    }
                </div>
                
                <div class="course-details">
                    <h1 class="course-title">@Model.CourseName</h1>
                    <div class="course-meta">
                        <div class="instructor-info">
                            @if (!string.IsNullOrEmpty(Model.AuthorImage))
                            {
                                <img src="@Model.AuthorImage" 
                                     alt="@Model.AuthorName" 
                                     class="instructor-avatar"
                                     onerror="this.src='/SharedMedia/defaults/default-avatar.svg'; this.style.opacity='0.7';" />
                            }
                            else
                            {
                                <img src="/SharedMedia/defaults/default-avatar.svg" 
                                     alt="@Model.AuthorName" 
                                     class="instructor-avatar default-avatar" />
                            }
                            <span class="instructor-name">By @Model.AuthorName</span>
                        </div>
                        
                        <div class="course-stats">
                            <span class="stat-item">
                                <i class="fas fa-book"></i>
                                @Model.Chapters.Count chapters
                            </span>
                            <span class="stat-item">
                                <i class="fas fa-play-circle"></i>
                                @Model.TotalLessons lessons
                            </span>
                            <span class="stat-item">
                                <i class="fas fa-users"></i>
                                Enrolled
                            </span>
                        </div>
                    </div>
                    
                    @if (!string.IsNullOrEmpty(Model.CourseDescription))
                    {
                        <p class="course-description">@Model.CourseDescription</p>
                    }
                </div>
            </div>
            
            <div class="course-progress-section">
                <div class="progress-info">
                    <span class="progress-text">Progress: <strong>@Model.ProgressPercentage.ToString("F0")%</strong></span>
                    <span class="completion-text">@Model.CompletedLessons of @Model.TotalLessons lessons completed</span>
                </div>
                <div class="progress-bar">
                    <div class="progress-fill" style="width: @Model.ProgressPercentage%"></div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Course Content -->
<div class="course-content">
    <div class="container">
        <div class="row">
            <!-- Main Content -->
            <div class="col-lg-8">
                <div class="course-overview">
                    <h2>Course Overview</h2>
                    
                    @if (!string.IsNullOrEmpty(Model.CourseDescription))
                    {
                        <div class="overview-description">
                            @Html.Raw(Model.CourseDescription)
                        </div>
                    }
                    
                    <div class="course-chapters">
                        <h3>Course Content</h3>
                        @foreach (var chapter in Model.Chapters)
                        {
                            <div class="chapter-overview">
                                <div class="chapter-header">
                                    <h4>@chapter.ChapterName</h4>
                                    <span class="chapter-progress">@chapter.CompletionPercentage.ToString("F0")% complete</span>
                                </div>
                                @if (!string.IsNullOrEmpty(chapter.ChapterDescription))
                                {
                                    <p class="chapter-description">@chapter.ChapterDescription</p>
                                }
                                <div class="chapter-stats">
                                    <span><i class="fas fa-play-circle"></i> @chapter.TotalLessons lessons</span>
                                    <span><i class="fas fa-check-circle"></i> @chapter.CompletedLessons completed</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            
            <!-- Sidebar - Course Navigation -->
            <div class="col-lg-4">
                <div class="course-navigation-container">
                    <!-- Create navigation view model from current model -->
                    @{
                        var navigationModel = new CourseNavigationViewModel
                        {
                            CourseId = Model.CourseId,
                            CourseName = Model.CourseName,
                            CurrentLessonId = Model.CurrentLessonId,
                            OverallProgress = Model.ProgressPercentage,
                            Chapters = Model.Chapters.Select(c => new ChapterNavigationViewModel
                            {
                                ChapterId = c.ChapterId,
                                ChapterName = c.ChapterName,
                                ChapterOrder = c.ChapterOrder,
                                IsCompleted = c.IsCompleted,
                                IsLocked = c.IsLocked,
                                CompletionPercentage = c.CompletionPercentage,
                                Lessons = c.Lessons.Select(l => new LessonNavigationViewModel
                                {
                                    LessonId = l.LessonId,
                                    LessonName = l.LessonName,
                                    LessonOrder = l.LessonOrder,
                                    LessonTypeName = l.LessonTypeName,
                                    IsCompleted = l.IsCompleted,
                                    IsLocked = l.IsLocked,
                                    IsCurrent = l.IsCurrent,
                                    HasQuiz = l.HasQuiz,
                                    RequiresQuizPass = l.RequiresQuizPass
                                }).ToList()
                            }).ToList()
                        };
                    }
                    @await Html.PartialAsync("~/Views/Learning/_CourseNavigation.cshtml", navigationModel)
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/pages/Learning/course-player.js"></script>
    
    <script>
        // Initialize course player when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            const courseHashId = '@(ViewBag.CourseHashId ?? "")';
            
            console.log('Course page initializing with courseId:', courseHashId);
            
            if (courseHashId && courseHashId !== '' && courseHashId !== 'undefined') {
                if (typeof initializeCoursePlayer === 'function') {
                    console.log('Initializing course player...');
                    initializeCoursePlayer(courseHashId);
                } else {
                    console.error('initializeCoursePlayer function not found');
                }
            } else {
                console.error('Invalid course ID - cannot initialize course player:', courseHashId);
            }
        });
    </script>
} 