@model BrainStormEra_MVC.Models.ViewModels.CourseListViewModel
@{
    ViewData["Title"] = "Courses";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - BrainStormEra</title>
    <meta name="description" content="BrainStormEra - Discover amazing courses and expand your knowledge">
    <link rel="icon" type="image/x-icon" href="~/img/logo/logowithoutbackground.png" sizes="48x48">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/global.css">
    <link rel="stylesheet" href="~/css/layouts/base.css">
    <link rel="stylesheet" href="~/css/components/header.css">
    <link rel="stylesheet" href="~/css/components/loader.css">
    <link rel="stylesheet" href="~/css/pages/Course/courses.css">
    <link rel="stylesheet" href="~/css/pages/Dashboard/instructor-dashboard.css">
    <link rel="stylesheet" href="~/css/components/footer.css">
    <link rel="stylesheet" href="~/css/pages/HomePage/enhanced-home.css">
    <link rel="preload" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" as="style">
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" as="style">
    <!-- Load page loader script -->
    <script src="~/js/components/loader.js"></script>
    <!-- Toast notifications CSS -->
    <link rel="stylesheet" href="~/css/components/toast-notifications.css">
    <!-- Chatbot CSS -->
    <link rel="stylesheet" href="~/css/components/chatbot.css">
    
    @* User authentication meta tags for JavaScript access *@
    @if (User.Identity?.IsAuthenticated == true)
    {
        <meta name="user-id" content="@User.FindFirst("UserId")?.Value" />
        <meta name="user-role" content="@User.FindFirst("UserRole")?.Value" />
        <meta name="user-name" content="@(User.FindFirst("FullName")?.Value ?? User.Identity.Name)" />
    }
</head>

<body>
    <!-- Display toast notifications from TempData -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div data-toast-success="@TempData["SuccessMessage"]" style="display:none;"></div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div data-toast-error="@TempData["ErrorMessage"]" style="display:none;"></div>
    }
    @if (TempData["WarningMessage"] != null)
    {
        <div data-toast-warning="@TempData["WarningMessage"]" style="display:none;"></div>
    }
    @if (TempData["InfoMessage"] != null)
    {
        <div data-toast-info="@TempData["InfoMessage"]" style="display:none;"></div>
    }

    <!-- Page Loader -->
    <div class="page-loader">
        <div class="loader"></div>
    </div>

    <!-- Include Header partial view -->
    @await Html.PartialAsync("~/Views/Shared/Header/_Header.cshtml")

    <!-- Page Header Theme CSS -->
    <link rel="stylesheet" href="~/css/components/page-header-themes.css">

    <!-- Hero Section -->
    <div class="page-header index-page hero-section">
        <div class="hero-overlay"></div>
        <div class="container" style="padding-top: 100px;">
            <div class="row align-items-center min-vh-50">
                <div class="col-lg-8 mx-auto text-center">
                    <h1 class="hero-title">Discover Amazing Courses</h1>
                    <p class="hero-subtitle">Expand your knowledge with our comprehensive course library</p>
                    <div class="hero-stats">
                        <div class="stat-item">
                            <i class="fas fa-book"></i>
                            <span>@Model.TotalCourses+ Courses</span>
                        </div>
                        <div class="stat-item">
                            <i class="fas fa-users"></i>
                            <span>Expert Instructors</span>
                        </div>
                        <div class="stat-item">
                            <i class="fas fa-certificate"></i>
                            <span>Certificates</span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="container main-content">
        <!-- Filters Section -->
        <div class="filters-section">
            <div class="row align-items-center mb-3">
                <div class="col-lg-6">
                    <!-- Search Bar -->
                    <div class="search-form">
                        <div class="search-wrapper">
                            <input type="text" id="searchInput" class="form-control search-input" 
                                   placeholder="Search courses..." value="@Model.CurrentSearch">
                            <button type="button" id="clearSearch" class="clear-search-btn" style="display: none;">
                                <i class="fas fa-times"></i>
                            </button>
                            <button type="button" id="searchBtn" class="search-btn">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3">
                    <!-- Sort Options -->
                    <div class="sort-section">
                        <div class="sort-wrapper">
                            <label for="sortSelect" class="sort-label">
                                <i class="fas fa-sort-amount-down"></i>
                                Sort by
                            </label>
                            <select id="sortSelect" class="form-select custom-select">
                                <option value="newest">Newest First</option>
                                <option value="name_asc">Name A-Z</option>
                                <option value="name_desc">Name Z-A</option>
                                <option value="price_asc">Price Low to High</option>
                                <option value="price_desc">Price High to Low</option>
                                <option value="popular">Most Popular</option>
                            </select>
                        </div>
                    </div>
                </div>
                <div class="col-lg-3">
                    <div class="results-info">
                        <span class="results-count" id="resultsCount">@Model.TotalCourses courses found</span>
                    </div>
                </div>
            </div>

            <!-- Category Filters -->
            <div class="category-filters">
                <div class="filter-label">Categories:</div>
                <div class="filter-buttons">
                    <button class="filter-btn category-filter active" data-category="">
                        All Courses
                    </button>
                    @foreach (var category in Model.Categories)
                    {
                        <button class="filter-btn category-filter @(Model.CurrentCategory == category.CourseCategoryName ? "active" : "")" 
                                data-category="@category.CourseCategoryName">
                            @category.CourseCategoryName
                            <span class="count">(@category.CourseCount)</span>
                        </button>
                    }
                </div>
            </div>
        </div>

        <!-- Loading Indicator -->
        <div id="loadingIndicator" class="loading-indicator" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <span class="loading-text">Searching courses...</span>
        </div>

        <!-- Course Grid -->
        <div class="courses-section">
            @if (Model.Courses.Any())
            {
                <div class="row g-4">
                    @foreach (var course in Model.Courses)
                    {
                        <div class="col-lg-4 col-md-6 col-sm-12 mb-4">
                            <div class="course-card" data-course-id="@course.CourseId">
                                <div class="course-image">
                                    <img src="@course.CoursePicture" alt="@course.CourseName" loading="lazy" 
                                         onerror="this.onerror=null; this.src='/img/defaults/default-course.svg';">
                                    @if (course.Price > 0)
                                    {
                                        <div class="course-price">$@course.Price.ToString("N0")</div>
                                    }
                                    else
                                    {
                                        <div class="course-price free">Free</div>
                                    }
                                </div>
                                <div class="course-details">
                                    <div class="course-categories">
                                        @foreach (var category in course.CourseCategories.Take(2))
                                        {
                                            <span class="category-badge">@category</span>
                                        }
                                    </div>
                                    <h3 class="course-title">@course.CourseName</h3>
                                    <p class="course-description">@(course.Description?.Length > 100 ? course.Description.Substring(0, 100) + "..." : course.Description)</p>
                                    <div class="course-meta">
                                        <div class="instructor">
                                            <i class="fas fa-user"></i>
                                            <span>@course.CreatedBy</span>
                                        </div>
                                        <div class="rating">
                                            @{
                                                var courseRating = (double)course.StarRating;
                                                // Special logic: ratings 0.1-0.9 show as half star only
                                                double roundedCourseRating;
                                                if (courseRating > 0 && courseRating < 1)
                                                {
                                                    roundedCourseRating = 0.5; // Show only half star for ratings 0.1-0.9
                                                }
                                                else
                                                {
                                                    roundedCourseRating = Math.Round(courseRating * 2) / 2; // Round to nearest 0.5 for other values
                                                }
                                            }
                                            @for (int i = 1; i <= 5; i++)
                                            {
                                                if (i <= Math.Floor(roundedCourseRating))
                                                {
                                                    // Full star
                                                    <span class="star-combined">
                                                        <i class="fas fa-star-half-alt star-left"></i>
                                                        <i class="fas fa-star-half-alt star-right"></i>
                                                    </span>
                                                }
                                                else if (i - 0.5 <= roundedCourseRating)
                                                {
                                                    // Half star
                                                    <span class="star-half">
                                                        <i class="fas fa-star-half-alt"></i>
                                                    </span>
                                                }
                                                else
                                                {
                                                    // Empty star
                                                    <span class="star-combined star-empty">
                                                        <i class="fas fa-star-half-alt star-left"></i>
                                                        <i class="fas fa-star-half-alt star-right"></i>
                                                    </span>
                                                }
                                            }
                                            <span class="rating-text">(@course.StarRating.ToString("F1"))</span>
                                        </div>
                                    </div>
                                    <p class="course-students">@course.EnrollmentCount enrolled</p>
                                    <div class="course-actions">
                                        <a href="@Url.Action("Details", "Course", new { id = course.CourseId })" 
                                           class="btn btn-sm btn-outline-info" title="View Course Details">
                                            <i class="fas fa-eye"></i> Details
                                        </a>
                                        @if (ViewBag.IsAuthenticated == true && ViewBag.UserRole == "Learner")
                                        {
                                            @if (course.Price > 0)
                                            {
                                                <button class="btn btn-sm btn-outline-primary" onclick="enrollInCourse('@course.CourseId')" title="Purchase Course">
                                                    <i class="fas fa-shopping-cart"></i> Buy Now
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-sm btn-outline-success" onclick="enrollInCourse('@course.CourseId')" title="Enroll for Free">
                                                    <i class="fas fa-play"></i> Enroll Free
                                                </button>
                                            }
                                        }
                                        else
                                        {
                                            <a href="@Url.Action("Details", "Course", new { id = course.CourseId })" 
                                               class="btn btn-sm btn-outline-primary" title="Learn More">
                                                <i class="fas fa-info-circle"></i> Learn More
                                            </a>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!-- Pagination -->
                @if (Model.TotalPages > 1)
                {
                    <div class="pagination-wrapper">
                        <nav aria-label="Course pagination">
                            <ul class="pagination justify-content-center">
                                @if (Model.HasPreviousPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("Index", "Course", new { 
                                            category = Model.CurrentCategory, 
                                            search = Model.CurrentSearch, 
                                            page = Model.CurrentPage - 1 })">
                                            <i class="fas fa-chevron-left"></i>
                                            Previous
                                        </a>
                                    </li>
                                }

                                @for (int i = Math.Max(1, Model.CurrentPage - 2); i <= Math.Min(Model.TotalPages, Model.CurrentPage + 2); i++)
                                {
                                    <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                        <a class="page-link" href="@Url.Action("Index", "Course", new { 
                                            category = Model.CurrentCategory, 
                                            search = Model.CurrentSearch, 
                                            page = i })">
                                            @i
                                        </a>
                                    </li>
                                }

                                @if (Model.HasNextPage)
                                {
                                    <li class="page-item">
                                        <a class="page-link" href="@Url.Action("Index", "Course", new { 
                                            category = Model.CurrentCategory, 
                                            search = Model.CurrentSearch, 
                                            page = Model.CurrentPage + 1 })">
                                            Next
                                            <i class="fas fa-chevron-right"></i>
                                        </a>
                                    </li>
                                }
                            </ul>
                        </nav>
                        <div class="pagination-info">
                            Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to @(Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalCourses)) of @Model.TotalCourses courses
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-courses">
                    <div class="no-courses-content">
                        <i class="fas fa-search fa-3x"></i>
                        <h3>No courses found</h3>
                        @if (!string.IsNullOrEmpty(Model.CurrentSearch) || !string.IsNullOrEmpty(Model.CurrentCategory))
                        {
                            <p>Try adjusting your search criteria or browse all courses.</p>
                            <a href="@Url.Action("Index", "Course")" class="btn btn-primary">
                                <i class="fas fa-refresh"></i>
                                Show All Courses
                            </a>
                        }
                        else
                        {
                            <p>No courses are available at the moment. Please check back later.</p>
                        }
                    </div>
                </div>
            }
        </div>
    </div>    
    <!-- Footer -->
    @await Html.PartialAsync("~/Views/Shared/Footer/_Footer.cshtml")

    @* Include Chatbot for authenticated users *@
    @await Html.PartialAsync("~/Views/Shared/_Chatbot.cshtml")

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/aos/2.3.4/aos.js" defer></script>
    <!-- Include toast notifications script -->
    <script src="~/js/shared/toast-notifications.js"></script>
    <!-- Custom JS -->
    <script src="~/js/components/loader.js"></script>
    <script src="~/js/pages/Course/courses.js"></script>

    @* Chatbot Script for authenticated users *@
    @if (User.Identity?.IsAuthenticated == true)
    {
        @Html.AntiForgeryToken()
        <script src="~/js/components/chatbot.js"></script>
    }    
    <script>
        // Hide preloader when page is loaded
        window.addEventListener('load', function() {
            document.querySelector('.page-loader').classList.add('loaded');
            setTimeout(() => {
                document.querySelector('.page-loader').style.display = 'none';
            }, 500);
        });        // Change header style on scroll
        window.addEventListener('scroll', function () {
            if (window.scrollY > 50) {
                document.querySelector('.bse-sticky-header').classList.add('scrolled');
            } else {
                document.querySelector('.bse-sticky-header').classList.remove('scrolled');
            }
        });

        // Enroll in course function
        function enrollInCourse(courseId) {
            @if (ViewBag.IsAuthenticated == true)
            {
            <text>
                fetch('@Url.Action("Enroll", "Course")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                    },
                    body: JSON.stringify({ courseId: courseId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        if (data.redirect) {
                            window.location.href = data.redirect;
                        } else {
                            alert(data.message);
                            window.location.reload();
                        }
                    } else {
                        alert(data.message || 'An error occurred');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while enrolling');
                });
            </text>
            }
            else
            {
                <text>
                alert('Please log in to enroll in courses');
                window.location.href = '@Url.Action("Index", "Login")';
                </text>
            }
        }

        // Enhanced course card interactions
        document.addEventListener('DOMContentLoaded', function() {
            const courseCards = document.querySelectorAll('.course-card');
            
            courseCards.forEach(card => {
                card.addEventListener('mouseenter', function() {
                    this.style.transform = 'translateY(-8px) scale(1.02)';
                });
                
                card.addEventListener('mouseleave', function() {
                    this.style.transform = 'translateY(0) scale(1)';
                });
            });

            // Add animation classes to elements when they come into view
            const animateElements = document.querySelectorAll('.course-card');
            const observer = new IntersectionObserver((entries) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        entry.target.classList.add('animated');
                        observer.unobserve(entry.target);
                    }
                });
            }, { threshold: 0.1 });

            animateElements.forEach(element => {
                observer.observe(element);
            });
        });
    </script>
</body>
</html>
