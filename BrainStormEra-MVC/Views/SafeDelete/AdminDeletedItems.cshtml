@model BrainStormEra_MVC.Models.ViewModels.AdminDeletedItemsViewModel
@{
    ViewData["Title"] = "Admin - Deleted Items";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container-fluid py-4">
    <div class="row">
        <div class="col-12">
            <!-- Page Header -->
            <div class="d-flex justify-content-between align-items-center mb-4">
                <div>
                    <h1 class="h3 mb-1">
                        <i class="fas fa-trash-alt text-danger me-2"></i>
                        Deleted Items Management
                    </h1>
                    <p class="text-muted">Manage and restore deleted courses, chapters, and lessons</p>
                </div>
                <div class="badge bg-info fs-6">
                    @Model.TotalItems Total Items
                </div>
            </div>

            <!-- Search and Filter Section -->
            <div class="card shadow-sm mb-4">
                <div class="card-body">
                    <form method="get" class="row g-3">
                        <div class="col-md-6">
                            <label for="search" class="form-label">Search</label>
                            <div class="input-group">
                                <span class="input-group-text">
                                    <i class="fas fa-search"></i>
                                </span>
                                <input type="text" id="search" name="search" class="form-control" 
                                       placeholder="Search by name or description..." 
                                       value="@Model.SearchQuery">
                            </div>
                        </div>
                        <div class="col-md-4">
                            <label for="entityType" class="form-label">Entity Type</label>
                            <select id="entityType" name="entityType" class="form-select">
                                <option value="All" selected="@(Model.EntityType == "All")">All Types</option>
                                <option value="Course" selected="@(Model.EntityType == "Course")">Courses</option>
                                <option value="Chapter" selected="@(Model.EntityType == "Chapter")">Chapters</option>
                                <option value="Lesson" selected="@(Model.EntityType == "Lesson")">Lessons</option>
                            </select>
                        </div>
                        <div class="col-md-2 d-flex align-items-end">
                            <button type="submit" class="btn btn-primary w-100">
                                <i class="fas fa-filter me-1"></i>Filter
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Results Section -->
            @if (Model.HasItems)
            {
                <div class="card shadow-sm">
                    <div class="card-header bg-light">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">Deleted Items</h5>
                            <small class="text-muted">
                                Showing @((Model.CurrentPage - 1) * Model.PageSize + 1) to 
                                @(Math.Min(Model.CurrentPage * Model.PageSize, Model.TotalItems)) 
                                of @Model.TotalItems items
                            </small>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th scope="col">Type</th>
                                        <th scope="col">Name</th>
                                        <th scope="col">Deleted Date</th>
                                        <th scope="col">Reason</th>
                                        <th scope="col" class="text-center">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in Model.DeletedItems)
                                    {
                                        <tr>
                                            <td>
                                                <span class="badge @item.EntityTypeBadgeClass">
                                                    <i class="@item.EntityTypeIcon me-1"></i>
                                                    @item.EntityType
                                                </span>
                                            </td>
                                            <td>
                                                <div class="fw-medium">@item.EntityName</div>
                                                <small class="text-muted">ID: @item.EntityId</small>
                                            </td>
                                            <td>
                                                <div>@item.FormattedDeletedDate</div>
                                                <small class="text-muted">by @item.DeletedByUserId</small>
                                            </td>
                                            <td>
                                                <span class="text-muted">@item.DeleteReason</span>
                                            </td>
                                            <td class="text-center">
                                                @if (item.CanRestore)
                                                {
                                                    <button type="button" class="btn btn-sm btn-outline-success me-2" 
                                                            onclick="restoreItem('@item.EntityType', '@item.EntityId', '@item.EntityName')"
                                                            title="Restore this item">
                                                        <i class="fas fa-undo"></i>
                                                    </button>
                                                }
                                                <button type="button" class="btn btn-sm btn-outline-danger" 
                                                        onclick="permanentDelete('@item.EntityType', '@item.EntityId', '@item.EntityName')"
                                                        title="Permanently delete this item">
                                                    <i class="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>

                <!-- Pagination -->
                @if (Model.TotalPages > 1)
                {
                    <nav aria-label="Deleted items pagination" class="mt-4">
                        <ul class="pagination justify-content-center">
                            @if (Model.HasPreviousPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("AdminDeletedItems", new { search = Model.SearchQuery, entityType = Model.EntityType, page = Model.CurrentPage - 1, pageSize = Model.PageSize })"
                                       aria-label="Previous">
                                        <span aria-hidden="true">&laquo;</span>
                                    </a>
                                </li>
                            }

                            @{
                                int startPage = Math.Max(1, Model.CurrentPage - 2);
                                int endPage = Math.Min(Model.TotalPages, Model.CurrentPage + 2);
                            }

                            @if (startPage > 1)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("AdminDeletedItems", new { search = Model.SearchQuery, entityType = Model.EntityType, page = 1, pageSize = Model.PageSize })">1</a>
                                </li>
                                @if (startPage > 2)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                            }

                            @for (int i = startPage; i <= endPage; i++)
                            {
                                <li class="page-item @(i == Model.CurrentPage ? "active" : "")">
                                    <a class="page-link" href="@Url.Action("AdminDeletedItems", new { search = Model.SearchQuery, entityType = Model.EntityType, page = i, pageSize = Model.PageSize })">@i</a>
                                </li>
                            }

                            @if (endPage < Model.TotalPages)
                            {
                                @if (endPage < Model.TotalPages - 1)
                                {
                                    <li class="page-item disabled">
                                        <span class="page-link">...</span>
                                    </li>
                                }
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("AdminDeletedItems", new { search = Model.SearchQuery, entityType = Model.EntityType, page = Model.TotalPages, pageSize = Model.PageSize })">@Model.TotalPages</a>
                                </li>
                            }

                            @if (Model.HasNextPage)
                            {
                                <li class="page-item">
                                    <a class="page-link" href="@Url.Action("AdminDeletedItems", new { search = Model.SearchQuery, entityType = Model.EntityType, page = Model.CurrentPage + 1, pageSize = Model.PageSize })"
                                       aria-label="Next">
                                        <span aria-hidden="true">&raquo;</span>
                                    </a>
                                </li>
                            }
                        </ul>
                    </nav>
                }
            }
            else
            {
                <div class="card shadow-sm">
                    <div class="card-body text-center py-5">
                        <i class="fas fa-inbox fa-4x text-muted mb-3"></i>
                        <h4 class="text-muted">No deleted items found</h4>
                        @if (!string.IsNullOrEmpty(Model.SearchQuery) || Model.EntityType != "All")
                        {
                            <p class="text-muted">
                                No items match your current search and filter criteria.
                            </p>
                            <a href="@Url.Action("AdminDeletedItems")" class="btn btn-outline-primary">
                                <i class="fas fa-times me-1"></i>Clear Filters
                            </a>
                        }
                        else
                        {
                            <p class="text-muted">No items have been deleted yet.</p>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
</div>

<!-- Confirmation Modals -->
<div class="modal fade" id="restoreModal" tabindex="-1" aria-labelledby="restoreModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="restoreModalLabel">
                    <i class="fas fa-undo text-success me-2"></i>Restore Item
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to restore <strong id="restoreItemName"></strong>?</p>
                <p class="text-muted">This will make the item active again and accessible to users.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="restoreForm" method="post" action="@Url.Action("RestoreItem")" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="restoreEntityType" name="EntityType" />
                    <input type="hidden" id="restoreEntityId" name="EntityId" />
                    <button type="submit" class="btn btn-success">
                        <i class="fas fa-undo me-1"></i>Restore
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="deleteModal" tabindex="-1" aria-labelledby="deleteModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteModalLabel">
                    <i class="fas fa-exclamation-triangle text-danger me-2"></i>Permanent Delete
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-danger">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    <strong>Warning:</strong> This action cannot be undone!
                </div>
                <p>Are you sure you want to permanently delete <strong id="deleteItemName"></strong>?</p>
                <p class="text-muted">This will remove the item completely from the database.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <form id="deleteForm" method="post" action="@Url.Action("PermanentDelete")" style="display: inline;">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="deleteEntityType" name="EntityType" />
                    <input type="hidden" id="deleteEntityId" name="EntityId" />
                    <button type="submit" class="btn btn-danger">
                        <i class="fas fa-trash me-1"></i>Delete Permanently
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function restoreItem(entityType, entityId, entityName) {
            document.getElementById('restoreItemName').textContent = entityName;
            document.getElementById('restoreEntityType').value = entityType;
            document.getElementById('restoreEntityId').value = entityId;
            
            var restoreModal = new bootstrap.Modal(document.getElementById('restoreModal'));
            restoreModal.show();
        }

        function permanentDelete(entityType, entityId, entityName) {
            document.getElementById('deleteItemName').textContent = entityName;
            document.getElementById('deleteEntityType').value = entityType;
            document.getElementById('deleteEntityId').value = entityId;
            
            var deleteModal = new bootstrap.Modal(document.getElementById('deleteModal'));
            deleteModal.show();
        }

        // Auto-submit form when entity type changes
        document.getElementById('entityType').addEventListener('change', function() {
            this.form.submit();
        });
    </script>
}
