@model DataAccessLayer.Models.ViewModels.UserDetailViewModel
@{
    ViewData["Title"] = "User Details";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - BrainStormEra</title>
    <meta name="description" content="BrainStormEra - User details and learning progress">
    <link rel="icon" type="image/x-icon" href="~/SharedMedia/logo/logowithoutbackground.png" sizes="48x48">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/global.css">
    <link rel="stylesheet" href="~/css/layouts/base.css">
    <link rel="stylesheet" href="~/css/components/header.css">
    <link rel="stylesheet" href="~/css/components/loader.css">
    <link rel="stylesheet" href="~/css/pages/Course/courses.css">
    <link rel="stylesheet" href="~/css/components/footer.css">
    <link rel="stylesheet" href="~/css/pages/HomePage/enhanced-home.css"> <!-- User Management specific styles -->
    <link rel="stylesheet" href="~/css/pages/User/user-management.css">
    <link rel="stylesheet" href="~/css/pages/User/user-detail.css">
    <link rel="stylesheet" href="~/css/components/toast-notifications.css">
    <link rel="stylesheet" href="~/css/components/chatbot.css">
    <link rel="stylesheet" href="~/css/pages/Achievements/LearnerAchievement.css">

    @* User authentication meta tags for JavaScript access *@
    @if (User.Identity?.IsAuthenticated == true)
    {
        <meta name="user-id" content="@User.FindFirst("UserId")?.Value" />
        <meta name="user-role" content="@User.FindFirst("UserRole")?.Value" />
        <meta name="user-name" content="@(User.FindFirst("FullName")?.Value ?? User.Identity.Name)" />
    }

    <script src="~/js/components/loader.js"></script>
</head>

<body>
    <!-- Toast notification data containers -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div data-toast-success="@TempData["SuccessMessage"]" style="display:none;"></div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div data-toast-error="@TempData["ErrorMessage"]" style="display:none;"></div>
    }
    @if (TempData["WarningMessage"] != null)
    {
        <div data-toast-warning="@TempData["WarningMessage"]" style="display:none;"></div>
    }
    @if (TempData["InfoMessage"] != null)
    {
        <div data-toast-info="@TempData["InfoMessage"]" style="display:none;"></div>
    }

    <!-- Page Loader -->
    <div class="page-loader">
        <div class="loader"></div>
    </div> <!-- Include Header partial view -->
    @await Html.PartialAsync("~/Views/Shared/Header/_Header.cshtml")

    <!-- Main Content -->
    <div class="container main-content">
        <!-- User Profile Header -->
        <div class="user-profile-header mb-4">
            <div class="card border-0 shadow-sm">
                <div class="card-body p-4">
                    <div class="row align-items-center">
                        <div class="col-auto">
                            <div class="user-avatar">
                                <img src="@Url.Action("GetAvatar", "Auth", new { userId = Model.UserId })"
                                    alt="@Model.FullName" class="rounded-circle"
                                    style="width: 80px; height: 80px; object-fit: cover;"
                                    onerror="this.onerror=null; this.src='/SharedMedia/defaults/default-avatar.svg';">
                            </div>
                        </div>
                        <div class="col">
                            <h3 class="mb-1 fw-bold">@Model.FullName</h3>
                            <p class="text-muted mb-2">@Model.Email</p>
                            <div class="d-flex align-items-center gap-3 mb-2">
                                <span class="badge bg-@(Model.Status.ToLower() switch 
                                      { 
                                          "active" => "success", 
                                          "completed" => "primary", 
                                          "inactive" => "warning", 
                                          _ => "secondary" 
                                      }) px-3 py-2">
                                    @Model.Status
                                </span>
                                <small class="text-muted">
                                    <i class="fas fa-calendar-alt me-1"></i>
                                    Enrolled @Model.EnrolledDate.ToString("MMM dd, yyyy")
                                </small>
                            </div>
                            <!-- Achievement Summary -->
                            <div class="d-flex align-items-center gap-4">
                                <div class="achievement-summary-item">
                                    <i class="fas fa-trophy text-warning me-1"></i>
                                    <span class="fw-bold">@Model.Achievements.Count</span>
                                    <small class="text-muted">Achievements</small>
                                </div>
                                <div class="achievement-summary-item">
                                    <i class="fas fa-graduation-cap text-primary me-1"></i>
                                    <span class="fw-bold">@Model.Enrollments.Count</span>
                                    <small class="text-muted">Courses</small>
                                </div>
                            </div>
                        </div>
                        <div class="col-auto">
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="row">
            <!-- Left Column - Course Progress and Activity -->
            <div class="col-lg-8">
                <!-- Course Enrollments -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-light border-0 d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 fw-bold text-primary">
                            <i class="fas fa-graduation-cap me-2"></i>Enrolled Courses
                        </h5>
                        <button class="btn btn-outline-primary btn-sm" id="toggleCoursesBtn"
                            onclick="toggleCoursesList()">
                            <i class="fas fa-chevron-down" id="coursesToggleIcon"></i>
                        </button>
                    </div>
                    <div class="card-body p-4" id="coursesContent">
                        @if (Model.Enrollments.Any())
                        {
                            @foreach (var enrollment in Model.Enrollments)
                            {
                                <div class="course-item mb-3 p-3 border rounded">
                                    <div class="row align-items-center">
                                        <div class="col-auto">
                                            <img src="@enrollment.CourseImage" alt="@enrollment.CourseName" class="rounded"
                                                style="width: 50px; height: 50px; object-fit: cover;"
                                                onerror="this.onerror=null; this.src='/SharedMedia/defaults/default-course.svg';">
                                        </div>
                                        <div class="col">
                                            <h6 class="mb-1 fw-bold">@enrollment.CourseName</h6>
                                            <div class="progress mb-2" style="height: 6px;">
                                                <div class="progress-bar bg-primary"
                                                    style="width: @enrollment.ProgressPercentage%"></div>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <small class="text-muted">@enrollment.ProgressPercentage% complete</small>
                                                <span class="badge bg-@(enrollment.StatusText.ToLower() switch 
                                                      { 
                                                          "active" => "success", 
                                                          "completed" => "primary", 
                                                          "suspended" => "warning", 
                                                          _ => "secondary" 
                                                      }) px-2 py-1">
                                                    @enrollment.StatusText
                                                </span>
                                            </div>

                                            <!-- Certificate Information -->
                                            @if (enrollment.IsCompleted)
                                            {
                                                <div class="certificate-section mt-3 p-2 bg-light rounded">
                                                    @if (enrollment.HasCertificate)
                                                    {
                                                        <div class="d-flex align-items-center">
                                                            <i class="fas fa-certificate text-warning me-2"></i>
                                                            <div>
                                                                <small class="fw-bold text-success">Certificate Earned</small>
                                                                <br>
                                                                <small class="text-muted">
                                                                    Issued: @enrollment.CertificateIssuedDate?.ToString("MMM dd, yyyy")
                                                                    @if (enrollment.FinalScore.HasValue)
                                                                    {
                                                                        <span> • Score: @enrollment.FinalScore.Value.ToString("F1")%</span>
                                                                    }
                                                                </small>
                                                                @if (!string.IsNullOrEmpty(enrollment.CertificateCode))
                                                                {
                                                                    <br>
                                                                    <small class="text-muted">Code: @enrollment.CertificateCode</small>
                                                                }
                                                            </div>
                                                        </div>
                                                    }
                                                    else
                                                    {
                                                        <div class="d-flex align-items-center">
                                                            <i class="fas fa-exclamation-triangle text-warning me-2"></i>
                                                            <div>
                                                                <small class="text-warning fw-bold">Certificate Processing</small>
                                                                <br>
                                                                <small class="text-muted">Certificate is being generated.</small>
                                                            </div>
                                                        </div>
                                                    }
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-book-open fa-3x text-muted mb-3"></i>
                                <p class="text-muted">No course enrollments found</p>
                            </div>
                        }
                    </div>
                </div>
            </div> <!-- Right Column - Account Info and Achievements -->
            <div class="col-lg-4">
                <!-- Account Information -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-light border-0">
                        <h5 class="mb-0 fw-bold text-primary">
                            <i class="fas fa-user me-2"></i>Account Information
                        </h5>
                    </div>
                    <div class="card-body p-4">
                        <div class="d-flex justify-content-between mb-2">
                            <span class="text-muted">Username:</span>
                            <span class="fw-bold">@Model.Username</span>
                        </div>
                        @if (!string.IsNullOrEmpty(Model.PhoneNumber))
                        {
                            <div class="d-flex justify-content-between mb-2">
                                <span class="text-muted">Phone:</span>
                                <span>@Model.PhoneNumber</span>
                            </div>
                        }
                        <div class="d-flex justify-content-between mb-2">
                            <span class="text-muted">Member since:</span>
                            <span>@Model.AccountCreatedAt.ToString("MMM dd, yyyy")</span>
                        </div>
                    </div>
                </div>

                <!-- Achievements Section -->
                <div class="card border-0 shadow-sm mb-4">
                    <div class="card-header bg-light border-0 d-flex justify-content-between align-items-center">
                        <h5 class="mb-0 fw-bold text-primary">
                            <i class="fas fa-trophy me-2"></i>Achievements
                        </h5>
                        <button class="btn btn-outline-primary btn-sm" id="toggleAchievementsBtn"
                            onclick="toggleAchievementsList()">
                            <i class="fas fa-chevron-down" id="achievementsToggleIcon"></i>
                        </button>
                    </div>
                    <div class="card-body p-4" id="achievementsContent">
                        @if (Model.Achievements.Any())
                        {
                            <div class="achievements-stats mb-3">
                                <div class="row text-center">
                                    <div class="col-6">
                                        <div class="achievement-stat">
                                            <h4 class="text-primary mb-1">@Model.Achievements.Count</h4>
                                            <small class="text-muted">Total Achievements</small>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="achievements-list">
                                @foreach (var achievement in Model.Achievements.Take(5))
                                {
                                    <!-- Debug info (remove in production) -->
                                    @if (User.IsInRole("Admin"))
                                    {
                                        <small class="text-muted d-block mb-1">
                                            Debug: Icon="@achievement.AchievementIcon" | Type="@achievement.AchievementName"
                                        </small>
                                    }
                                    
                                    <div class="achievement-item mb-3 p-3 border rounded bg-light">
                                        <div class="d-flex align-items-center">
                                            <div class="achievement-icon me-3">
                                                @{
                                                    var iconClass = !string.IsNullOrEmpty(achievement.AchievementIcon) 
                                                        ? achievement.AchievementIcon 
                                                        : "fas fa-trophy";
                                                    var isImage = !string.IsNullOrEmpty(achievement.AchievementIcon) && 
                                                                 (achievement.AchievementIcon.StartsWith("/") || 
                                                                  achievement.AchievementIcon.StartsWith("http"));
                                                }
                                                
                                                @if (isImage)
                                                {
                                                    <!-- Custom uploaded image -->
                                                    <img src="@achievement.AchievementIcon" 
                                                         alt="@achievement.AchievementName" 
                                                         class="achievement-image"
                                                         onerror="this.onerror=null; this.src='/SharedMedia/defaults/default-achievement.svg';">
                                                }
                                                else
                                                {
                                                    <!-- FontAwesome icon -->
                                                    <i class="@iconClass"></i>
                                                }
                                            </div>
                                            <div class="achievement-details flex-grow-1">
                                                <h6 class="mb-1 fw-bold text-primary">@achievement.AchievementName</h6>
                                                <p class="mb-1 text-muted small">@achievement.Description</p>
                                                <small class="text-muted">
                                                    <i class="fas fa-calendar-alt me-1"></i>
                                                    Earned @achievement.EarnedDate.ToString("MMM dd, yyyy")
                                                </small>
                                            </div>
                                        </div>
                                    </div>
                                }

                                @if (Model.Achievements.Count > 5)
                                {
                                    <div class="text-center mt-3">
                                        <small class="text-muted">
                                            +@(Model.Achievements.Count - 5) more achievements
                                        </small>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="text-center py-4">
                                <i class="fas fa-trophy fa-3x text-muted mb-3"></i>
                                <p class="text-muted">No achievements earned yet</p>
                                <small class="text-muted">Complete courses and activities to earn achievements!</small>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div> <!-- Status Change Modal -->
    <div class="modal fade" id="statusModal" tabindex="-1">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content border-0 shadow">
                <div class="modal-header bg-warning text-dark">
                    <h5 class="modal-title fw-bold">
                        <i class="fas fa-flag me-2"></i>Change Status
                    </h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body p-4">
                    <form id="statusForm">
                        <div class="mb-4">
                            <label for="newStatus" class="form-label fw-bold">New Status</label> <select
                                class="form-select" id="newStatus">
                                @{
                                    var currentStatus = Model.Status;
                                }
                                <option value="Active" selected="@(currentStatus == "Active")">Active</option>
                                <option value="Inactive" selected="@(currentStatus == "Inactive")">Inactive</option>
                                <option value="Completed" selected="@(currentStatus == "Completed")">Completed</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="statusReason" class="form-label fw-bold">Reason (Optional)</label>
                            <textarea class="form-control" id="statusReason" rows="3"
                                placeholder="Reason for status change..."></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer bg-light">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-warning px-4" onclick="saveStatus()">
                        <i class="fas fa-save me-2"></i>Update Status
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    @await Html.PartialAsync("~/Views/Shared/Footer/_Footer.cshtml")

    @* Include Chatbot for authenticated users *@
    @await Html.PartialAsync("~/Views/Shared/_Chatbot.cshtml")

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/components/toast-notifications.js"></script>

    <script>
        // Hide preloader when page is loaded
        window.addEventListener('load', function () {
            document.querySelector('.page-loader').classList.add('loaded');
            setTimeout(() => {
                document.querySelector('.page-loader').style.display = 'none';
            }, 500);
        });

        // Progress range update
        document.getElementById('progressPercentage').addEventListener('input', function () {
            document.getElementById('progressValue').textContent = this.value + '%';
        });


        function changeStatus() {
            new bootstrap.Modal(document.getElementById('statusModal')).show();
        }


        // Save status function
        async function saveStatus() {
            const status = document.getElementById('newStatus').value;
            const reason = document.getElementById('statusReason').value;

            try {
                const response = await fetch('@Url.Action("UpdateStatus", "User")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        userId: '@Model.UserId',
                        courseId: '@(Model.CourseId ?? "")',
                        status: status,
                        reason: reason
                    })
                });

                const result = await response.json();

                if (result.success) {
                    showToast('Status updated successfully', 'success');
                    bootstrap.Modal.getInstance(document.getElementById('statusModal')).hide();
                    location.reload(); // Refresh to show updated data
                } else {
                    showToast(result.message || 'Failed to update status', 'error');
                }
            } catch (error) {
                showToast('An error occurred while updating status', 'error');
            }
        }

        // Quick action functions
        function sendMessage() {
            // Implement message functionality
            showToast('Message functionality coming soon', 'info');
        }

        // Course list toggle function
        function toggleCoursesList() {
            const content = document.getElementById('coursesContent');
            const icon = document.getElementById('coursesToggleIcon');

            if (content.style.display === 'none') {
                content.style.display = 'block';
                content.style.opacity = '0';
                content.style.transform = 'translateY(-10px)';

                // Animate in
                requestAnimationFrame(() => {
                    content.style.transition = 'all 0.3s ease';
                    content.style.opacity = '1';
                    content.style.transform = 'translateY(0)';
                });

                icon.className = 'fas fa-chevron-down';
            } else {
                content.style.transition = 'all 0.3s ease';
                content.style.opacity = '0';
                content.style.transform = 'translateY(-10px)';

                setTimeout(() => {
                    content.style.display = 'none';
                }, 300);

                icon.className = 'fas fa-chevron-right';
            }
        }

        // Achievements list toggle function
        function toggleAchievementsList() {
            const content = document.getElementById('achievementsContent');
            const icon = document.getElementById('achievementsToggleIcon');

            if (content.style.display === 'none') {
                content.style.display = 'block';
                content.style.opacity = '0';
                content.style.transform = 'translateY(-10px)';

                // Animate in
                requestAnimationFrame(() => {
                    content.style.transition = 'all 0.3s ease';
                    content.style.opacity = '1';
                    content.style.transform = 'translateY(0)';
                });

                icon.className = 'fas fa-chevron-down';
            } else {
                content.style.transition = 'all 0.3s ease';
                content.style.opacity = '0';
                content.style.transform = 'translateY(-10px)';

                setTimeout(() => {
                    content.style.display = 'none';
                }, 300);

                icon.className = 'fas fa-chevron-right';
            }
        }

        // Handle achievement image errors and icon display
        document.addEventListener('DOMContentLoaded', function() {
            const achievementImages = document.querySelectorAll('.achievement-image');
            achievementImages.forEach(img => {
                img.addEventListener('error', function() {
                    this.onerror = null;
                    this.src = '/SharedMedia/defaults/default-achievement.svg';
                });
            });

            // Ensure FontAwesome icons are visible
            const achievementIcons = document.querySelectorAll('.achievement-icon i');
            achievementIcons.forEach(icon => {
                if (icon.style.display === 'none' || icon.offsetWidth === 0) {
                    console.log('Icon not visible:', icon.className);
                    // Fallback to default icon
                    icon.className = 'fas fa-trophy';
                }
            });
        });

        // Toast notification function
        function showToast(message, type) {
            // This function should be implemented based on your toast notification system
            // Create and show toast notification
            const toastContainer = document.querySelector('.toast-container') || createToastContainer();
            const toast = createToast(message, type);
            toastContainer.appendChild(toast);

            const bsToast = new bootstrap.Toast(toast);
            bsToast.show();

            // Remove toast after it hides
            toast.addEventListener('hidden.bs.toast', () => {
                toast.remove();
            });
        }

        function createToastContainer() {
            const container = document.createElement('div');
            container.className = 'toast-container position-fixed top-0 end-0 p-3';
            container.style.zIndex = '1055';
            document.body.appendChild(container);
            return container;
        }

        function createToast(message, type) {
            const colorClass = type === 'success' ? 'text-bg-success' :
                type === 'error' ? 'text-bg-danger' :
                    type === 'warning' ? 'text-bg-warning' : 'text-bg-info';

            const toast = document.createElement('div');
            toast.className = `toast ${colorClass}`;
            toast.setAttribute('role', 'alert');
            toast.innerHTML = `
                <div class="d-flex">
                    <div class="toast-body">
                        ${message}
                    </div>
                    <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast"></button>
                </div>
            `; return toast;
        }
    </script>

    <!-- User Management JavaScript -->
    <script src="~/js/pages/User/user-management.js"></script>

    @Html.AntiForgeryToken()
</body>

</html>
