@model DataAccessLayer.Models.ViewModels.NotificationEditViewModel
@{
    ViewData["Title"] = "Edit Notification";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - BrainStormEra</title>
    <meta name="description" content="Edit notification">
    <link rel="icon" type="image/x-icon" href="~/img/logo/logowithoutbackground.png" sizes="48x48">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/global.css">
    <link rel="stylesheet" href="~/css/layouts/base.css">
    <link rel="stylesheet" href="~/css/components/header.css">
    <link rel="stylesheet" href="~/css/components/loader.css">
    <link rel="stylesheet" href="~/css/pages/Course/create-course.css">
    <link rel="stylesheet" href="~/css/components/page-header-themes.css">
    <link rel="stylesheet" href="~/css/components/footer.css">
    <link rel="stylesheet" href="~/css/pages/HomePage/enhanced-home.css">
    <link rel="stylesheet" href="~/css/components/chatbot.css">
    <link rel="stylesheet" href="~/css/pages/Notifications/notification.css">
    <!-- User meta tags for chatbot -->
    @if (Context.Session.GetString("UserId") != null)
    {
        <meta name="user-id" content="@Context.Session.GetString("UserId")">
        <meta name="user-role" content="@Context.Session.GetString("UserRole")">
        <meta name="user-name" content="@Context.Session.GetString("UserName")">
    }
    <link rel="preload" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" as="style">
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" as="style">
    <!-- Load page loader script -->
    <script src="~/js/components/loader.js"></script>
    <!-- Toast notifications CSS -->
    <link rel="stylesheet" href="~/css/components/toast-notifications.css">
</head>

<body>
    <!-- Display toast notifications from TempData -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div data-toast-success="@TempData["SuccessMessage"]" style="display:none;"></div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div data-toast-error="@TempData["ErrorMessage"]" style="display:none;"></div>
    }
    @if (TempData["WarningMessage"] != null)
    {
        <div data-toast-warning="@TempData["WarningMessage"]" style="display:none;"></div>
    }
    @if (TempData["InfoMessage"] != null)
    {
        <div data-toast-info="@TempData["InfoMessage"]" style="display:none;"></div>
    }

    <!-- Page Loader -->
    <div class="page-loader">
        <div class="loader"></div>
    </div>

    <!-- Include Header partial view -->
    @await Html.PartialAsync("~/Views/Shared/Header/_Header.cshtml")

    <!-- Page Header -->
    <div class="page-header create-page">
        <div class="container">
            <div class="row">
                <div class="col-12 text-center">
                    <h1 class="mb-3">
                        <i class="fas fa-edit me-3"></i>
                        Edit Notification
                    </h1>
                    <p class="lead mb-0">Update your notification content</p>
                    <div class="mt-4">
                        <span class="badge bg-light text-dark fs-6 me-3">
                            <i class="fas fa-user me-1"></i> Recipient: @Model.RecipientUserName
                        </span>
                        @if (!string.IsNullOrEmpty(Model.CourseName))
                        {
                            <span class="badge bg-light text-dark fs-6 me-3">
                                <i class="fas fa-graduation-cap me-1"></i> Course: @Model.CourseName
                            </span>
                        }
                        <span class="badge bg-light text-dark fs-6">
                            <i class="fas fa-clock me-1"></i> Created: @Model.CreatedAt.ToString("MMM dd, yyyy â€¢ HH:mm")
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="create-course-container">
        <form asp-action="Edit" method="post" id="editNotificationForm">
            @Html.AntiForgeryToken()
            <input asp-for="NotificationId" type="hidden" />
            <input asp-for="CourseId" type="hidden" />
            <input asp-for="RecipientUserName" type="hidden" />
            <input asp-for="CourseName" type="hidden" />
            <input asp-for="CreatedAt" type="hidden" />

            <!-- Notification Content Section -->
            <div class="form-section">
                <h3 class="section-title">
                    <i class="fas fa-edit me-2"></i>
                    Update Notification Content
                </h3>
                <p class="text-muted mb-4">Modify your notification message</p>

                <div class="row">
                    <div class="col-lg-8">
                        <div class="mb-4">
                            <label asp-for="Title" class="form-label">
                                <i class="fas fa-heading me-2"></i>Notification Title *
                            </label>
                            <input asp-for="Title" class="form-control" placeholder="Enter notification title"
                                maxlength="100" required>
                            <span asp-validation-for="Title" class="text-danger"></span>
                        </div>

                        <div class="mb-4">
                            <label asp-for="Content" class="form-label">
                                <i class="fas fa-align-left me-2"></i>Message Content *
                            </label>
                            <textarea asp-for="Content" class="form-control" rows="5"
                                placeholder="Enter your notification message" maxlength="500" required></textarea>
                            <span asp-validation-for="Content" class="text-danger"></span>
                            <div class="form-text">Maximum 500 characters</div>
                        </div>

                        <div class="mb-4">
                            <label asp-for="Type" class="form-label">
                                <i class="fas fa-tag me-2"></i>Notification Type
                            </label>
                            <select asp-for="Type" class="form-select">
                                <option value="">Select type (optional)</option>
                                <option value="info">Information</option>
                                <option value="warning">Warning</option>
                                <option value="success">Success</option>
                                <option value="urgent">Urgent</option>
                                <option value="course">Course Update</option>
                                <option value="announcement">Announcement</option>
                            </select>
                        </div>
                    </div>

                    <div class="col-lg-4">
                        <div class="help-section">
                            <h5><i class="fas fa-lightbulb me-2"></i>Editing Tips</h5>
                            <ul class="list-unstyled">
                                <li><i class="fas fa-check text-success me-2"></i>Keep titles concise and descriptive
                                </li>
                                <li><i class="fas fa-check text-success me-2"></i>Use clear, actionable language</li>
                                <li><i class="fas fa-check text-success me-2"></i>Consider your audience</li>
                                <li><i class="fas fa-check text-success me-2"></i>Preview before updating</li>
                            </ul>

                            <div class="alert alert-info mt-4">
                                <i class="fas fa-info-circle me-2"></i>
                                <strong>Note:</strong> Updated notifications will be refreshed for the recipient in
                                real-time.
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Form Actions -->
            <div class="form-actions">
                <div class="row justify-content-center">
                    <div class="col-lg-8 text-center">
                        <h5 class="mb-4 text-muted">Ready to update your notification?</h5>

                        <button type="submit" class="btn btn-primary me-3"
                            style="font-size: 0.8rem; padding: 0.5rem 1rem;">
                            <i class="fas fa-save me-2"></i>
                            Update Notification
                        </button>

                        <a href="@Url.Action("Index", "Notification")" class="btn btn-outline-secondary"
                            style="font-size: 0.8rem; padding: 0.5rem 1rem;">
                            <i class="fas fa-arrow-left me-2"></i>
                            Cancel
                        </a>

                        <div class="mt-4">
                            <small class="text-muted">
                                <i class="fas fa-info-circle me-1"></i>
                                Changes will be saved immediately and updated for the recipient
                            </small>
                        </div>
                    </div>
                </div>
            </div>
        </form>
    </div>

    <!-- Include Footer partial view -->
    @await Html.PartialAsync("~/Views/Shared/Footer/_Footer.cshtml")

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/components/toast-notifications.js"></script>
    <script src="~/js/components/loader.js"></script>

    @* Chatbot Script for authenticated users *@
    @if (User.Identity?.IsAuthenticated == true)
    {
        @Html.AntiForgeryToken()
        <script src="~/js/components/chatbot.js"></script>
    }

    <script>
        // Hide preloader when page is loaded
        window.addEventListener('load', function () {
            document.querySelector('.page-loader').classList.add('loaded');
            setTimeout(() => {
                document.querySelector('.page-loader').style.display = 'none';
            }, 500);
        });

        document.addEventListener('DOMContentLoaded', function () {
            // Form validation
            document.getElementById('editNotificationForm').addEventListener('submit', function (e) {
                const title = document.querySelector('input[name="Title"]').value.trim();
                const content = document.querySelector('textarea[name="Content"]').value.trim();

                if (!title) {
                    e.preventDefault();
                    showToast('Please enter a notification title', 'error');
                    return;
                }

                if (!content) {
                    e.preventDefault();
                    showToast('Please enter notification content', 'error');
                    return;
                }

                if (title.length > 100) {
                    e.preventDefault();
                    showToast('Title must be less than 100 characters', 'error');
                    return;
                }

                if (content.length > 500) {
                    e.preventDefault();
                    showToast('Content must be less than 500 characters', 'error');
                    return;
                }
            });

            // Character counter for content
            const contentTextarea = document.querySelector('textarea[name="Content"]');
            const titleInput = document.querySelector('input[name="Title"]');

            function updateCharacterCount(element, maxLength, elementType) {
                const currentLength = element.value.length;
                const remaining = maxLength - currentLength;

                // Find or create counter element
                let counter = element.parentNode.querySelector('.char-counter');
                if (!counter) {
                    counter = document.createElement('div');
                    counter.className = 'char-counter text-muted small mt-1';
                    element.parentNode.appendChild(counter);
                }

                counter.textContent = `${currentLength}/${maxLength} characters`;
                if (remaining < 50) {
                    counter.className = 'char-counter text-warning small mt-1';
                } else if (remaining < 0) {
                    counter.className = 'char-counter text-danger small mt-1';
                } else {
                    counter.className = 'char-counter text-muted small mt-1';
                }
            }

            contentTextarea.addEventListener('input', function () {
                updateCharacterCount(this, 500, 'content');
            });

            titleInput.addEventListener('input', function () {
                updateCharacterCount(this, 100, 'title');
            });

            // Initialize counters
            updateCharacterCount(contentTextarea, 500, 'content');
            updateCharacterCount(titleInput, 100, 'title');
        });
    </script>

    <!-- Chatbot for authenticated users -->
    @if (Context.Session.GetString("UserId") != null)
    {
        @await Html.PartialAsync("~/Views/Shared/_Chatbot.cshtml")
    }

</body>

</html>

                               
                               
                                
                               
                           
                               
