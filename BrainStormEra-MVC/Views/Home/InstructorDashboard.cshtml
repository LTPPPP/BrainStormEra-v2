@model DataAccessLayer.Models.ViewModels.InstructorDashboardViewModel
@{
    ViewData["Title"] = "Instructor Dashboard";
    Layout = null;
}
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - BrainStormEra</title>
    <link rel="icon" type="image/x-icon" href="~/SharedMedia/logo/logowithoutbackground.png" sizes="48x48">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/animate.css/4.1.1/animate.min.css">
    <link rel="stylesheet" href="~/css/layouts/base.css">
    <link rel="stylesheet" href="~/css/components/header.css">
    <link rel="stylesheet" href="~/css/pages/Dashboard/instructor-dashboard.css">
    <link rel="stylesheet" href="~/css/components/loader.css">
    <link rel="stylesheet" href="~/css/global.css">
    <link rel="stylesheet" href="~/css/pages/HomePage/enhanced-home.css">
    <link rel="stylesheet" href="~/css/pages/HomePage/homePage.css">
    <link rel="stylesheet" href="~/css/pages/HomePage/landing_page.css">
    <link rel="stylesheet" href="~/css/components/placeholders.css">
    <!-- Toast notifications CSS -->
    <link rel="stylesheet" href="~/css/components/toast-notifications.css">
    <!-- Chatbot CSS -->
    <link rel="stylesheet" href="~/css/components/chatbot.css">
    <!-- Load page loader script -->
    <script src="~/js/components/loader.js"></script>

    @* User authentication meta tags for JavaScript access *@
    @if (User.Identity?.IsAuthenticated == true)
    {
        <meta name="user-id" content="@User.FindFirst("UserId")?.Value" />
        <meta name="user-role" content="@User.FindFirst("UserRole")?.Value" />
        <meta name="user-name" content="@(User.FindFirst("FullName")?.Value ?? User.Identity.Name)" />
    }
</head>

<body>
    <!-- Display toast notifications from TempData -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div data-toast-success="@TempData["SuccessMessage"]" style="display:none;"></div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div data-toast-error="@TempData["ErrorMessage"]" style="display:none;"></div>
    }
    @if (TempData["WarningMessage"] != null)
    {
        <div data-toast-warning="@TempData["WarningMessage"]" style="display:none;"></div>
    }
    @if (TempData["InfoMessage"] != null)
    {
        <div data-toast-info="@TempData["InfoMessage"]" style="display:none;"></div>
    }

    <!-- Page Loader -->
    <div class="page-loader">
        <div class="loader"></div>
    </div>

    <!-- Include Header partial view -->
    @await Html.PartialAsync("~/Views/Shared/Header/_Header.cshtml")

    <!-- Page Header Theme CSS -->
    <link rel="stylesheet" href="~/css/components/page-header-themes.css">

    <div class="dashboard-container">
        <!-- Anti-forgery token - Only one needed -->
        @Html.AntiForgeryToken()

        <!-- Welcome Section -->
        <div class="page-header dashboard-page welcome-section">
            <div class="container welcome-container">
                <div class="row align-items-center">
                    <div class="col-md-8">
                        <h1 class="welcome-title">Welcome back, @(string.IsNullOrEmpty(Model.InstructorName) ?
                                                        "Instructor" : Model.InstructorName)!</h1>
                        <p class="welcome-subtitle">Manage your courses and track your teaching progress.</p>
                    </div>
                    <div class="col-md-4 text-md-end">
                        <a href="@Url.Action("CreateCourse", "Course")" class="btn btn-primary create-course-btn">
                            <i class="fas fa-plus me-2"></i>Create New Course
                        </a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Main Content -->
        <div class="container main-dashboard py-4">
            <div class="row">
                <!-- Course Management -->
                <div class="col-12">
                    <!-- Statistics Overview -->
                    <div class="dashboard-card teaching-overview mb-4">
                        <div class="dashboard-card-header">
                            <h2>Teaching Overview</h2>
                        </div>
                        <div class="dashboard-card-body">
                            <div class="stats-widget">
                                <div class="stat-item">
                                    <div class="stat-icon">
                                        <i class="fas fa-book"></i>
                                    </div>
                                    <div class="stat-content">
                                        <h4 class="stat-value">@Model.TotalCourses</h4>
                                        <p class="stat-label">Total Courses</p>
                                    </div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-icon">
                                        <i class="fas fa-users"></i>
                                    </div>
                                    <div class="stat-content">
                                        <h4 class="stat-value">@Model.TotalStudents</h4>
                                        <p class="stat-label">Total Students</p>
                                    </div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-icon">
                                        <i class="fas fa-coins"></i>
                                    </div>
                                    <div class="stat-content">
                                        <h4 class="stat-value">@Model.TotalRevenue.ToString("N0")</h4>
                                        <p class="stat-label">Payment Points</p>
                                    </div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-icon">
                                        <i class="fas fa-star"></i>
                                    </div>
                                    <div class="stat-content">
                                        <h4 class="stat-value">@Model.AverageRating.ToString("F1")</h4>
                                        <p class="stat-label">Average Rating</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- My Courses Section -->
                    <div class="dashboard-card mb-4">
                        <div class="dashboard-card-header d-flex justify-content-between align-items-center">
                            <h2>My Courses</h2>
                            <a href="@Url.Action("Index", "Course")" class="view-all-link">View All <i
                                    class="fas fa-arrow-right ms-1"></i></a>
                        </div>
                        <div class="dashboard-card-body">
                            @if (Model.RecentCourses.Any())
                            {
                                <div class="row g-4">
                                    @foreach (var course in Model.RecentCourses)
                                    {
                                        <div class="col-lg-4 col-md-6 col-sm-12 mb-4">
                                            <div class="course-card">
                                                <div class="course-image">
                                                    <img src="@course.CoursePicture" alt="@course.CourseName"
                                                        onerror="this.onerror=null; this.src='/SharedMedia/defaults/default-course.svg';">
                                                    @if (course.Price > 0)
                                                    {
                                                        <div class="course-price">$@course.Price</div>
                                                    }
                                                    else
                                                    {
                                                        <div class="course-price free">Free</div>
                                                    }
                                                </div>
                                                <div class="course-details">
                                                    <h3 class="course-title">@course.CourseName</h3>
                                                    <p class="course-students">@course.EnrollmentCount enrolled</p>

                                                    @* Course Status Display Logic *@
                                                    @{
                                                        var statusClass = "";
                                                        var statusIcon = "";
                                                        var statusText = "";

                                                        // Get current approval status (normalize to lowercase)
                                                        var approvalStatus = course.ApprovalStatus?.ToLower() ?? "";
                                                        var courseStatus = course.CourseStatus.GetValueOrDefault(5); // Default to Draft (5) if null
                                                        
                                                        // Priority-based status determination based on course_status and approval_status
                                                        switch (courseStatus)
                                                        {
                                                            case 7: // Archived
                                                                statusClass = "text-secondary";
                                                                statusIcon = "fas fa-archive";
                                                                statusText = "Archived";
                                                                break;

                                                            case 2: // Inactive
                                                                statusClass = "text-muted";
                                                                statusIcon = "fas fa-pause-circle";
                                                                statusText = "Inactive";
                                                                break;

                                                            case 5: // Draft
                                                                statusClass = "text-info";
                                                                statusIcon = "fas fa-edit";
                                                                statusText = "Draft";
                                                                break;

                                                            case 3: // Pending
                                                                statusClass = "text-warning";
                                                                statusIcon = "fas fa-clock";
                                                                statusText = "Pending Review";
                                                                break;

                                                            case 6: // Published
                                                                if (approvalStatus == "approved")
                                                                {
                                                                    statusClass = "text-success";
                                                                    statusIcon = "fas fa-check-circle";
                                                                    statusText = "Published";
                                                                }
                                                                else
                                                                {
                                                                    statusClass = "text-warning";
                                                                    statusIcon = "fas fa-exclamation-circle";
                                                                    statusText = "Needs Approval";
                                                                }
                                                                break;

                                                            case 1: // Active
                                                                if (approvalStatus == "approved")
                                                                {
                                                                    statusClass = "text-success";
                                                                    statusIcon = "fas fa-check-circle";
                                                                    statusText = "Active";
                                                                }
                                                                else if (approvalStatus == "pending")
                                                                {
                                                                    statusClass = "text-warning";
                                                                    statusIcon = "fas fa-clock";
                                                                    statusText = "Pending Approval";
                                                                }
                                                                else if (approvalStatus == "rejected")
                                                                {
                                                                    statusClass = "text-danger";
                                                                    statusIcon = "fas fa-times-circle";
                                                                    statusText = "Rejected";
                                                                }
                                                                else
                                                                {
                                                                    statusClass = "text-info";
                                                                    statusIcon = "fas fa-edit";
                                                                    statusText = "Draft";
                                                                }
                                                                break;

                                                            case 4: // Completed
                                                                statusClass = "text-success";
                                                                statusIcon = "fas fa-flag-checkered";
                                                                statusText = "Completed";
                                                                break;

                                                            default:
                                                                statusClass = "text-info";
                                                                statusIcon = "fas fa-edit";
                                                                statusText = "Draft"; // Default to Draft status
                                                                break;
                                                        }

                                                        // Check if course can be deleted
                                                        var canDelete = (
                                                            courseStatus == 2 || 
                                                            courseStatus == 5 || 
                                                            (courseStatus == 1 && 
                                                             (string.IsNullOrEmpty(approvalStatus) || 
                                                              approvalStatus == "draft" || 
                                                              approvalStatus == "rejected"))
                                                        ) && course.EnrollmentCount == 0;
                                                    }

                                                    <p class="course-status @statusClass">
                                                        <i class="@statusIcon"></i> Status: @statusText
                                                    </p>

                                                    <div class="course-actions">
                                                        <a href="@Url.Action("Details", "Course", new { id = course.CourseId })"
                                                            class="btn btn-sm btn-outline-info" title="View Course Details">
                                                            <i class="fas fa-eye"></i> Details
                                                        </a>
                                                        <a href="@Url.Action("EditCourse", "Course", new { id = course.CourseId })"
                                                            class="btn btn-sm btn-outline-primary" title="Edit Course">
                                                            <i class="fas fa-edit"></i> Edit
                                                        </a>
                                                        
                                                        @* Conditional Delete Button *@
                                                        @if (canDelete)
                                                        {
                                                            <button type="button"
                                                                class="btn btn-sm btn-outline-danger delete-course-btn"
                                                                data-course-id="@course.CourseId"
                                                                data-course-name="@course.CourseName" 
                                                                title="Delete Course">
                                                                <i class="fas fa-trash"></i> Delete
                                                            </button>
                                                        }
                                                        else
                                                        {
                                                            @* Disabled Delete Button with Tooltip *@
                                                            <button type="button"
                                                                class="btn btn-sm btn-outline-secondary"
                                                                disabled
                                                                title="@(course.EnrollmentCount > 0 ? "Cannot delete course with enrolled students" : "Cannot delete published or pending courses")"
                                                                data-bs-toggle="tooltip">
                                                                <i class="fas fa-trash"></i> Delete
                                                            </button>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="empty-state">
                                    <img src="/SharedMedia/static/empty-courses.svg" alt="No courses"
                                        class="empty-state-img"
                                        onerror="this.onerror=null; this.src='/SharedMedia/defaults/default-course.svg';">
                                    <h3>No courses yet</h3>
                                    <p>Start creating your first course to share your knowledge with students!</p>
                                    <a href="@Url.Action("CreateCourse", "Course")" class="btn btn-primary">Create
                                        Course</a>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @await Html.PartialAsync("~/Views/Shared/Footer/_Footer.cshtml")

    @* Include Chatbot for authenticated users *@
    @await Html.PartialAsync("~/Views/Shared/_Chatbot.cshtml")

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Include toast notifications script -->
    <script src="~/js/shared/toast-notifications.js"></script>
    <script src="~/js/pages/instructor-dashboard.js"></script>

    @* Chatbot Script for authenticated users *@
    @if (User.Identity?.IsAuthenticated == true)
    {
        <script src="~/js/components/chatbot.js"></script>
    }

    <script>
        // Hide preloader when page is loaded
        window.addEventListener('load', function () {
            const loader = document.querySelector('.page-loader');
            if (loader) {
                loader.classList.add('loaded');
                setTimeout(() => {
                    loader.style.display = 'none';
                }, 500);
            }
        });

        // Enhanced course card interactions
        document.addEventListener('DOMContentLoaded', function () {
            // Initialize components
            initializeCourseCards();
            initializeDeleteHandlers();
            initializeStatAnimations();
            initializeTooltips();

            // Toast notification function
            window.showToast = function (message, type = 'info') {
                // Use existing toast notification system
                if (window.toastNotifications && window.toastNotifications.show) {
                    window.toastNotifications.show(message, type);
                } else {
                    // Fallback to console and alert
                    console.log(`Toast [${type}]: ${message}`);
                    if (type === 'error') {
                        alert(`Error: ${message}`);
                    }
                }
            };
        });

        // Initialize course card interactions
        function initializeCourseCards() {
            const courseCards = document.querySelectorAll('.course-card');
            courseCards.forEach(card => {
                card.addEventListener('mouseenter', function () {
                    this.style.transform = 'translateY(-8px) scale(1.02)';
                    this.style.transition = 'transform 0.3s ease';
                });

                card.addEventListener('mouseleave', function () {
                    this.style.transform = 'translateY(0) scale(1)';
                });
            });
        }

        // Initialize tooltips for disabled buttons
        function initializeTooltips() {
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
            const tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl);
            });
        }

        // Initialize delete handlers
        function initializeDeleteHandlers() {
            const deleteButtons = document.querySelectorAll('.delete-course-btn');
            deleteButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const courseId = this.getAttribute('data-course-id');
                    const courseName = this.getAttribute('data-course-name');
                    confirmDeleteCourse(courseId, courseName, this);
                });
            });
        }

        // Course deletion confirmation function
        function confirmDeleteCourse(courseId, courseName, buttonElement) {
            const confirmMessage = `Are you sure you want to delete the course "${courseName}"?\n\n` +
                                 `This action cannot be undone and will permanently remove all course content.`;
            
            if (confirm(confirmMessage)) {
                deleteCourse(courseId, buttonElement);
            }
        }

        // Delete course function
        function deleteCourse(courseId, buttonElement) {
            if (!courseId) {
                showToast('Invalid course ID', 'error');
                return;
            }

            // Show loading state
            if (buttonElement) {
                buttonElement.disabled = true;
                buttonElement.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Deleting...';
            }

            // Get anti-forgery token
            const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
            if (!tokenInput) {
                showToast('Security token not found. Please refresh the page.', 'error');
                restoreDeleteButton(buttonElement);
                return;
            }

            // Prepare form data
            const formData = new FormData();
            formData.append('id', courseId);
            formData.append('__RequestVerificationToken', tokenInput.value);

            // Make the request
            fetch('@Url.Action("DeleteCourse", "Course")', {
                method: 'POST',
                body: formData,
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.json();
                })
                .then(data => {
                    if (data.success) {
                        showToast(data.message || 'Course deleted successfully!', 'success');
                        // Reload the page to refresh the course list
                        setTimeout(() => {
                            window.location.reload();
                        }, 1500);
                    } else {
                        showToast(data.message || 'Failed to delete course. Please try again.', 'error');
                        restoreDeleteButton(buttonElement);
                    }
                })
                .catch(error => {
                    console.error('Error deleting course:', error);
                    showToast('An error occurred while deleting the course. Please try again.', 'error');
                    restoreDeleteButton(buttonElement);
                });
        }

        // Restore delete button to original state
        function restoreDeleteButton(buttonElement) {
            if (buttonElement) {
                buttonElement.disabled = false;
                buttonElement.innerHTML = '<i class="fas fa-trash"></i> Delete';
            }
        }

        // Initialize statistics animations
        function initializeStatAnimations() {
            const statItems = document.querySelectorAll('.stat-item');

            // Check if Intersection Observer is supported
            if ('IntersectionObserver' in window) {
                const observer = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            entry.target.style.animationDelay = Math.random() * 0.5 + 's';
                            entry.target.classList.add('animate__animated', 'animate__fadeInUp');
                        }
                    });
                });

                statItems.forEach(item => observer.observe(item));
            } else {
                // Fallback for browsers without Intersection Observer
                statItems.forEach((item, index) => {
                    setTimeout(() => {
                        item.classList.add('animate__animated', 'animate__fadeInUp');
                    }, index * 100);
                });
            }
        }
    </script>

</body>

</html>