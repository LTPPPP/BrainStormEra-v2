@model DataAccessLayer.Models.ViewModels.ResetPasswordViewModel

@{
    ViewData["Title"] = "Reset Password";
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Reset Password - BrainStormEra</title>
    <link rel="icon" type="image/x-icon" href="~/SharedMedia/logo/logowithoutbackground.png" sizes="48x48">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/global.css">
    <link rel="stylesheet" href="~/css/pages/Auth/login.css">
    <link rel="stylesheet" href="~/css/pages/HomePage/enhanced-home.css">
</head>

<body>
    <!-- Toast notification data containers -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div data-toast-success="@TempData["SuccessMessage"]" style="display:none;"></div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div data-toast-error="@TempData["ErrorMessage"]" style="display:none;"></div>
    }
    @if (TempData["WarningMessage"] != null)
    {
        <div data-toast-warning="@TempData["WarningMessage"]" style="display:none;"></div>
    }
    @if (TempData["InfoMessage"] != null)
    {
        <div data-toast-info="@TempData["InfoMessage"]" style="display:none;"></div>
    }

    <!-- Home button -->
    <a href="@Url.Action("Index", "Home")" class="home-button" title="Return to Home">
        <i class="fas fa-home"></i>
    </a>

<div class="login-container">
    <div class="login-form-wrapper">
        <div class="login-header">
            <h1 class="text-center">Reset Password</h1>
            <p class="text-center">Create a new password for your account</p>
        </div>

        <div class="login-form">
            <form id="resetPasswordForm" asp-controller="Login" asp-action="ResetPassword" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger validation-summary"></div>

                <input type="hidden" asp-for="Email" />
                <input type="hidden" asp-for="Token" />

                <div class="form-group">
                    <label asp-for="NewPassword" class="control-label">New Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        <input asp-for="NewPassword" class="form-control" placeholder="Enter new password"
                            autocomplete="new-password" />
                        <button type="button" class="btn btn-outline-secondary toggle-password" tabindex="-1">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    <span asp-validation-for="NewPassword" class="text-danger"></span>
                    <div class="password-strength-meter mt-2">
                        <div class="strength-bar"></div>
                    </div>
                    <small class="password-feedback text-muted"></small>
                </div>

                <div class="form-group">
                    <label asp-for="ConfirmPassword" class="control-label">Confirm Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        <input asp-for="ConfirmPassword" class="form-control" placeholder="Confirm new password"
                            autocomplete="new-password" />
                    </div>
                    <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary btn-block login-btn">
                        <span class="btn-text">Reset Password</span>
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

<!-- jQuery and Validation Scripts -->
<script src="https://code.jquery.com/jquery-3.7.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="~/lib/jquery-validation/dist/jquery.validate.min.js"></script>
<script src="~/lib/jquery-validation-unobtrusive/jquery.validate.unobtrusive.min.js"></script>
<script src="~/js/features/toast-notification.js"></script>

<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Show loading spinner on form submit
        const form = document.getElementById('resetPasswordForm');
        const submitBtn = document.querySelector('.login-btn');

        if (form) {
            form.addEventListener('submit', function () {
                const btnText = submitBtn.querySelector('.btn-text');
                const spinner = submitBtn.querySelector('.spinner-border');

                btnText.textContent = 'Resetting...';
                spinner.classList.remove('d-none');
                submitBtn.disabled = true;
            });
        }

        // Toggle password visibility
        const togglePasswordBtns = document.querySelectorAll('.toggle-password');
        togglePasswordBtns.forEach(btn => {
            btn.addEventListener('click', function () {
                const passwordInput = this.closest('.input-group').querySelector('input');
                const icon = this.querySelector('i');

                if (passwordInput.type === 'password') {
                    passwordInput.type = 'text';
                    icon.classList.remove('fa-eye');
                    icon.classList.add('fa-eye-slash');
                } else {
                    passwordInput.type = 'password';
                    icon.classList.remove('fa-eye-slash');
                    icon.classList.add('fa-eye');
                }
            });
        });

        // Password strength meter
        const passwordInput = document.querySelector('input[name="NewPassword"]');
        const strengthBar = document.querySelector('.strength-bar');
        const passwordFeedback = document.querySelector('.password-feedback');

        if (passwordInput && strengthBar && passwordFeedback) {
            passwordInput.addEventListener('input', function () {
                const password = this.value;
                let strength = 0;
                let feedback = '';

                if (password.length >= 8) {
                    strength += 25;
                }

                if (password.match(/[A-Z]/)) {
                    strength += 25;
                }

                if (password.match(/[0-9]/)) {
                    strength += 25;
                }

                if (password.match(/[^A-Za-z0-9]/)) {
                    strength += 25;
                }

                // Update strength bar
                strengthBar.style.width = strength + '%';

                // Update color based on strength
                if (strength <= 25) {
                    strengthBar.style.backgroundColor = '#dc3545'; // red
                    feedback = 'Weak password';
                } else if (strength <= 50) {
                    strengthBar.style.backgroundColor = '#ffc107'; // yellow
                    feedback = 'Moderate password';
                } else if (strength <= 75) {
                    strengthBar.style.backgroundColor = '#0dcaf0'; // info
                    feedback = 'Good password';
                } else {
                    strengthBar.style.backgroundColor = '#198754'; // green
                    feedback = 'Strong password';
                }

                passwordFeedback.textContent = feedback;
            });
        }

        // Quote rotation
        const quotes = document.querySelectorAll('.quote-item');
        let currentQuote = 0;

        function rotateQuotes() {
            quotes.forEach(quote => quote.classList.remove('active'));
            quotes[currentQuote].classList.add('active');
            currentQuote = (currentQuote + 1) % quotes.length;
        }

        setTimeout(() => {
            setInterval(rotateQuotes, 8000);
        }, 2000);
    });
</script>

</body>
</html>
