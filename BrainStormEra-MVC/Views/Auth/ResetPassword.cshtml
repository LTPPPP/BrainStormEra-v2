@model DataAccessLayer.Models.ViewModels.ResetPasswordViewModel

@{
    ViewData["Title"] = "Reset Password";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<link rel="stylesheet" href="~/css/global.css">
<link rel="stylesheet" href="~/css/pages/Auth/login.css">
<link rel="stylesheet" href="~/css/pages/HomePage/enhanced-home.css">

<div class="login-container">
    <div class="login-form-wrapper">
        <div class="login-header">
            <h1 class="text-center">Reset Password</h1>
            <p class="text-center">Create a new password for your account</p>
        </div>

        <div class="login-form">
            <form id="resetPasswordForm" asp-controller="Login" asp-action="ResetPassword" method="post">
                <div asp-validation-summary="ModelOnly" class="text-danger validation-summary"></div>

                <input type="hidden" asp-for="Email" />
                <input type="hidden" asp-for="Token" />

                <div class="form-group">
                    <label asp-for="NewPassword" class="control-label">New Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        <input asp-for="NewPassword" class="form-control" placeholder="Enter new password"
                            autocomplete="new-password" />
                        <button type="button" class="btn btn-outline-secondary toggle-password" tabindex="-1">
                            <i class="fas fa-eye"></i>
                        </button>
                    </div>
                    <span asp-validation-for="NewPassword" class="text-danger"></span>
                    <div class="password-strength-meter mt-2">
                        <div class="strength-bar"></div>
                    </div>
                    <small class="password-feedback text-muted"></small>
                </div>

                <div class="form-group">
                    <label asp-for="ConfirmPassword" class="control-label">Confirm Password</label>
                    <div class="input-group">
                        <span class="input-group-text"><i class="fas fa-lock"></i></span>
                        <input asp-for="ConfirmPassword" class="form-control" placeholder="Confirm new password"
                            autocomplete="new-password" />
                    </div>
                    <span asp-validation-for="ConfirmPassword" class="text-danger"></span>
                </div>

                <div class="form-group">
                    <button type="submit" class="btn btn-primary btn-block login-btn">
                        <span class="btn-text">Reset Password</span>
                        <span class="spinner-border spinner-border-sm d-none" role="status" aria-hidden="true"></span>
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="login-image">
        <div class="image-overlay"></div>
        <div class="login-quotes">
            <div class="quote-item active">
                <p>"Security is always excessive until it's not enough."</p>
                <cite>- Robbie Sinclair</cite>
            </div>
            <div class="quote-item">
                <p>"A good password is the first line of defense in our increasingly digital world."</p>
                <cite>- Unknown</cite>
            </div>
        </div>
    </div>
</div>
@await Html.PartialAsync("~/Views/Shared/Footer/_Footer.cshtml")
@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            // Show loading spinner on form submit
            const form = document.getElementById('resetPasswordForm');
            const submitBtn = document.querySelector('.login-btn');

            if (form) {
                form.addEventListener('submit', function () {
                    const btnText = submitBtn.querySelector('.btn-text');
                    const spinner = submitBtn.querySelector('.spinner-border');

                    btnText.textContent = 'Resetting...';
                    spinner.classList.remove('d-none');
                    submitBtn.disabled = true;
                });
            }

            // Toggle password visibility
            const togglePasswordBtns = document.querySelectorAll('.toggle-password');
            togglePasswordBtns.forEach(btn => {
                btn.addEventListener('click', function () {
                    const passwordInput = this.closest('.input-group').querySelector('input');
                    const icon = this.querySelector('i');

                    if (passwordInput.type === 'password') {
                        passwordInput.type = 'text';
                        icon.classList.remove('fa-eye');
                        icon.classList.add('fa-eye-slash');
                    } else {
                        passwordInput.type = 'password';
                        icon.classList.remove('fa-eye-slash');
                        icon.classList.add('fa-eye');
                    }
                });
            });

            // Password strength meter
            const passwordInput = document.querySelector('input[name="NewPassword"]');
            const strengthBar = document.querySelector('.strength-bar');
            const passwordFeedback = document.querySelector('.password-feedback');

            if (passwordInput && strengthBar && passwordFeedback) {
                passwordInput.addEventListener('input', function () {
                    const password = this.value;
                    let strength = 0;
                    let feedback = '';

                    if (password.length >= 8) {
                        strength += 25;
                    }

                    if (password.match(/[A-Z]/)) {
                        strength += 25;
                    }

                    if (password.match(/[0-9]/)) {
                        strength += 25;
                    }

                    if (password.match(/[^A-Za-z0-9]/)) {
                        strength += 25;
                    }

                    // Update strength bar
                    strengthBar.style.width = strength + '%';

                    // Update color based on strength
                    if (strength <= 25) {
                        strengthBar.style.backgroundColor = '#dc3545'; // red
                        feedback = 'Weak password';
                    } else if (strength <= 50) {
                        strengthBar.style.backgroundColor = '#ffc107'; // yellow
                        feedback = 'Moderate password';
                    } else if (strength <= 75) {
                        strengthBar.style.backgroundColor = '#0dcaf0'; // info
                        feedback = 'Good password';
                    } else {
                        strengthBar.style.backgroundColor = '#198754'; // green
                        feedback = 'Strong password';
                    }

                    passwordFeedback.textContent = feedback;
                });
            }

            // Quote rotation
            const quotes = document.querySelectorAll('.quote-item');
            let currentQuote = 0;

            function rotateQuotes() {
                quotes.forEach(quote => quote.classList.remove('active'));
                quotes[currentQuote].classList.add('active');
                currentQuote = (currentQuote + 1) % quotes.length;
            }

            setTimeout(() => {
                setInterval(rotateQuotes, 8000);
            }, 2000);
        });
    </script>
}
