@model DataAccessLayer.Models.ViewModels.CourseDetailViewModel
@{
    ViewData["Title"] = Model.CourseName;
    Layout = null;
}

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - BrainStormEra</title>
    <meta name="description" content="@Model.CourseName - @(Model.CourseDescription?.Length > 150 ? Model.CourseDescription.Substring(0, 150) + "..." : Model.CourseDescription) - BrainStormEra">
    <link rel="icon" type="image/x-icon" href="~/SharedMedia/logo/logowithoutbackground.png" sizes="48x48">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css">
    <link rel="stylesheet" href="~/css/global.css">
    <link rel="stylesheet" href="~/css/layouts/base.css">
    <link rel="stylesheet" href="~/css/components/header.css">
    <link rel="stylesheet" href="~/css/components/loader.css">
    <link rel="stylesheet" href="~/css/pages/Course/courses.css">
    <link rel="stylesheet" href="~/css/pages/Course/course-reviews.css">
    <link rel="stylesheet" href="~/css/components/footer.css">
    <link rel="stylesheet" href="~/css/pages/HomePage/enhanced-home.css">
    <link rel="preload" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" as="style">
    <link rel="preload" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.6.0/css/all.min.css" as="style">
    <!-- Load page loader script -->
    <script src="~/js/components/loader.js"></script>
    <!-- Toast notifications CSS -->
    <link rel="stylesheet" href="~/css/components/toast-notifications.css">
    <!-- Chatbot CSS -->
    <link rel="stylesheet" href="~/css/components/chatbot.css">
    
    @* User authentication meta tags for JavaScript access *@
    @if (User.Identity?.IsAuthenticated == true)
    {
        <meta name="user-id" content="@User.FindFirst("UserId")?.Value" />
        <meta name="user-role" content="@User.FindFirst("UserRole")?.Value" />
        <meta name="user-name" content="@(User.FindFirst("FullName")?.Value ?? User.Identity.Name)" />
    }
    
    <style>
        .approval-status {
            cursor: default !important;
            opacity: 0.8;
        }
        
        .approval-status.pending {
            background-color: #fff3cd !important;
            color: #856404 !important;
            border: 1px solid #ffeaa7;
        }
        
        .approval-status.approved {
            background-color: #d4edda !important;
            color: #155724 !important;
            border: 1px solid #c3e6cb;
        }
        
        .approval-status.draft {
            background-color: #e2e3e5 !important;
            color: #6c757d !important;
            border: 1px solid #ced4da;
        }
        
        .approval-status.rejected {
            background-color: #f8d7da !important;
            color: #721c24 !important;
            border: 1px solid #f5c6cb;
        }
        
        .approval-status:hover {
            transform: none !important;
            box-shadow: none !important;
        }
        
        .quiz-status-badge {
            font-size: 0.75rem;
            padding: 0.25rem 0.5rem;
            border-radius: 0.25rem;
            margin-left: 0.5rem;
            white-space: nowrap;
        }
        
        .archived-item {
            opacity: 0.6;
            background-color: #f8f9fa;
        }
        
        .archived-item .lesson-name-truncated {
            text-decoration: line-through;
        }
    </style>
</head>

<body>
    <!-- Page Loader -->
    <div class="page-loader">
        <div class="loader"></div>
    </div>

    <!-- Display toast notifications from TempData -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div data-toast-success="@TempData["SuccessMessage"]" style="display:none;"></div>
    }
    @if (TempData["ErrorMessage"] != null)
    {
        <div data-toast-error="@TempData["ErrorMessage"]" style="display:none;"></div>
    }
    @if (TempData["WarningMessage"] != null)
    {
        <div data-toast-warning="@TempData["WarningMessage"]" style="display:none;"></div>
    }
    @if (TempData["InfoMessage"] != null)
    {
        <div data-toast-info="@TempData["InfoMessage"]" style="display:none;"></div>
    }

    <!-- Header -->
    @await Html.PartialAsync("~/Views/Shared/Header/_Header.cshtml")

    <!-- Course Details Container -->
    <div class="course-details-container">
        @Html.AntiForgeryToken()        
        <!-- Course Header -->
        <div class="course-header">
            <div class="course-header-bg"></div>
            <div class="container">
                <div class="row">
                    <div class="col-lg-8">
                        <div class="course-header-content">
                            <!-- Course Categories -->
                            @if (Model.Categories != null && Model.Categories.Any())
                            {
                                <div class="course-categories">
                                    @foreach (var category in Model.Categories)
                                    {
                                        <span class="category-badge">
                                            <i class="fas fa-tag"></i>
                                            @category
                                        </span>
                                    }
                                </div>
                            }

                            <!-- Course Title & Subtitle -->
                            <div class="course-title-section">
                                <h1 class="course-title">@Model.CourseName</h1>
                                @if (!string.IsNullOrEmpty(Model.CourseDescription))
                                {
                                    <p class="course-subtitle">
                                        @(Model.CourseDescription.Length > 180 ? Model.CourseDescription.Substring(0, 180) + "..." : Model.CourseDescription)
                                    </p>
                                }
                            </div>

                            <!-- Course Meta Information -->
                            <div class="course-meta-section">
                                <div class="meta-primary">
                                    <div class="meta-item">
                                        <div class="meta-icon">
                                            <i class="fas fa-user-tie"></i>
                                        </div>
                                        <div class="meta-info">
                                            <span class="meta-label">Created by</span>
                                            <span class="meta-value">@Model.AuthorName</span>
                                        </div>
                                    </div>

                                    <div class="meta-item">
                                        <div class="meta-icon rating-icon">
                                            <span class="star-combined">
                                                <i class="fas fa-star-half-alt star-left"></i>
                                                <i class="fas fa-star-half-alt star-right"></i>
                                            </span>
                                        </div>
                                        <div class="meta-info">
                                            <span class="meta-label">Rating</span>                                            <div class="rating-display">
                                                <span class="rating-value">@Model.AverageRating.ToString("F1")</span>
                                                <div class="rating-stars" data-rating="@Model.AverageRating.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)">                                    @{
                                        var rating = (double)Model.AverageRating;
                                        // Special logic: ratings 0.1-0.9 show as half star only
                                        double roundedRating;
                                        if (rating > 0 && rating < 1)
                                        {
                                            roundedRating = 0.5; // Show only half star for ratings 0.1-0.9
                                        }
                                        else
                                        {
                                            roundedRating = Math.Round(rating * 2) / 2; // Round to nearest 0.5 for other values
                                        }
                                        
                                        for (int i = 1; i <= 5; i++)
                                        {
                                            if (i <= Math.Floor(roundedRating))
                                            {
                                                // Full star
                                                <span class="star-combined">
                                                    <i class="fas fa-star-half-alt star-left"></i>
                                                    <i class="fas fa-star-half-alt star-right"></i>
                                                </span>
                                            }
                                            else if (i - 0.5 <= roundedRating)
                                            {
                                                // Half star
                                                <span class="star-half">
                                                    <i class="fas fa-star-half-alt"></i>
                                                </span>
                                            }
                                            else
                                            {
                                                // Empty star
                                                <span class="star-combined star-empty">
                                                    <i class="fas fa-star-half-alt star-left"></i>
                                                    <i class="fas fa-star-half-alt star-right"></i>
                                                </span>
                                            }
                                                        }
                                                    }
                                                </div>
                                                <span class="rating-count">(@Model.TotalReviews)
                                                    @if(Model.TotalReviews == 1)
                                                    {
                                                        <span>review</span>
                                                    }
                                                    else
                                                    {
                                                        <span>reviews</span>
                                                    }
                                                </span>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="meta-item">
                                        <div class="meta-icon">
                                            <i class="fas fa-users"></i>
                                        </div>
                                        <div class="meta-info">
                                            <span class="meta-label">Students</span>
                                            <span class="meta-value">@Model.TotalStudents.ToString("N0") enrolled</span>
                                        </div>
                                    </div>
                                </div>

                                <div class="meta-secondary">
                                    @if (Model.EstimatedDuration > 0)
                                    {
                                        <div class="meta-item">
                                            <i class="fas fa-clock"></i>
                                            <span>@Model.EstimatedDuration hours total</span>
                                        </div>
                                    }

                                    @if (!string.IsNullOrEmpty(Model.DifficultyLevel))
                                    {
                                        <div class="meta-item">
                                            <i class="fas fa-signal"></i>
                                            <span>@Model.DifficultyLevel level</span>
                                        </div>
                                    }

                                    <div class="meta-item">
                                        <i class="fas fa-calendar-alt"></i>
                                        <span>Last updated @Model.CourseUpdatedAt.ToString("MMM yyyy")</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Course Stats -->
                            <div class="course-stats">
                                <div class="stat-item">
                                    <div class="stat-icon">
                                        <i class="fas fa-book"></i>
                                    </div>
                                    <div class="stat-content">
                                        <span class="stat-value">@Model.Chapters.Count</span>
                                        <span class="stat-label">Chapters</span>
                                    </div>
                                </div>
                                <div class="stat-item">
                                    <div class="stat-icon">
                                        <i class="fas fa-play-circle"></i>
                                    </div>
                                    <div class="stat-content">
                                        <span class="stat-value">@Model.Chapters.Sum(c => c.Lessons.Count)</span>
                                        <span class="stat-label">Lessons</span>
                                    </div>
                                </div>
                                @if (Model.Chapters.Sum(c => c.Quizzes.Count) > 0)
                                {
                                    <div class="stat-item">
                                        <div class="stat-icon">
                                            <i class="fas fa-question-circle"></i>
                                        </div>
                                        <div class="stat-content">
                                            <span class="stat-value">@Model.Chapters.Sum(c => c.Quizzes.Count)</span>
                                            <span class="stat-label">Quizzes</span>
                                        </div>
                                    </div>
                                }

                                @if (Model.Price == 0)
                                {
                                    <div class="stat-item price-tag free">
                                        <div class="stat-icon">
                                            <i class="fas fa-gift"></i>
                                        </div>
                                        <div class="stat-content">
                                            <span class="stat-value">FREE</span>
                                            <span class="stat-label">Course</span>
                                        </div>
                                    </div>                                }
                            </div>
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <div class="course-preview-card">
                            <div class="course-preview-image">
                                <img src="@Model.CourseImage" alt="@Model.CourseName" class="img-fluid"
                                     onerror="this.onerror=null; this.src='/SharedMedia/defaults/default-course.svg';">
                            </div>
                            <div class="course-preview-content">
                                <div class="course-price">
                                    @if (Model.Price == 0)
                                    {
                                        <span class="free-badge">FREE</span>
                                    }
                                    else
                                    {
                                        <span class="price">$@Model.Price.ToString("F2")</span>
                                    }
                                </div>

                                @if (Model.IsEnrolled && Model.ProgressPercentage > 0)
                                {
                                    <div class="course-progress-section mb-3">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <span class="progress-label fw-semibold">Your Progress</span>
                                            <span class="progress-percentage fw-bold text-primary">@Model.ProgressPercentage.ToString("F1")%</span>
                                        </div>
                                        <div class="progress" style="height: 8px; border-radius: 4px;">
                                            <div class="progress-bar bg-gradient" 
                                                 role="progressbar" 
                                                 style="width: @Model.ProgressPercentage%" 
                                                 aria-valuenow="@Model.ProgressPercentage" 
                                                 aria-valuemin="0" 
                                                 aria-valuemax="100">
                                            </div>
                                        </div>
                                        <small class="text-muted">@Model.ProgressPercentage.ToString("F1")% of course completed</small>
                                        
                                        @if (Model.ProgressPercentage >= 100)
                                        {
                                            <div class="mt-2">
                                                @if (ViewBag.HasCertificate == true)
                                                {
                                                    <div class="alert alert-success alert-sm mb-0">
                                                        <i class="fas fa-certificate me-2"></i>
                                                        <strong>Congratulations!</strong> You've completed this course and earned your certificate.
                                                        <a href="@Url.Action("Details", "Certificate", new { courseId = Model.CourseId })" class="btn btn-sm btn-outline-success ms-2">
                                                            View Certificate
                                                        </a>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <div class="alert alert-warning alert-sm mb-0">
                                                        <i class="fas fa-exclamation-triangle me-2"></i>
                                                        <strong>Course Completed!</strong> Your certificate is being processed. 
                                                        <a href="@Url.Action("Index", "Certificate")" class="btn btn-sm btn-outline-warning ms-2">
                                                            Check Certificates
                                                        </a>
                                                    </div>
                                                }
                                            </div>
                                        }
                                    </div>
                                }

                                @if (ViewBag.IsAuthor == true)
                                {
                                    <div class="instructor-notification">
                                        <div class="instructor-notification-icon">
                                            <i class="fas fa-crown"></i>
                                        </div>
                                        <h3 class="instructor-notification-title">You are the instructor of this course</h3>
                                        <div class="instructor-notification-actions">
                                            <a href="@Url.Action("EditCourse", "Course", new { id = Model.CourseId })" class="instructor-action-btn">
                                                <i class="fas fa-edit"></i>Edit Course
                                            </a>
                                                                        @if (string.IsNullOrEmpty(Model.ApprovalStatus) || Model.ApprovalStatus.ToLower() == "rejected" || Model.ApprovalStatus.ToLower() == "draft")
                            {
                                <button type="button" id="requestApprovalBtn" class="instructor-action-btn mt-2" 
                                        data-course-id="@Model.CourseId" title="Request Course Approval">
                                    <i class="fas fa-paper-plane"></i>Request Approval
                                </button>
                            }
                                            else if (Model.ApprovalStatus?.ToLower() == "pending")
                                            {
                                                <div class="instructor-action-btn mt-2 approval-status pending">
                                                    <i class="fas fa-clock"></i>Approval Pending
                                                </div>
                                            }
                                            else if (Model.ApprovalStatus?.ToLower() == "approved")
                                            {
                                                <div class="instructor-action-btn mt-2 approval-status approved">
                                                    <i class="fas fa-check-circle"></i>Approved
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                                else if (Model.IsEnrolled)
                                {
                                    <button class="btn btn-success btn-lg w-100 mb-3" disabled>
                                        <i class="fas fa-check-circle me-2"></i>Enrolled
                                    </button>
                                    <a href="@Url.Action("Learn", "Course", new { courseId = Model.CourseId })" class="btn btn-primary btn-lg w-100">
                                        <i class="fas fa-play me-2"></i>Take Course
                                    </a>
                                }
                                else
                                {
                                    @if (Model.Price > 0 && User.Identity?.IsAuthenticated == true && User.IsInRole("learner"))
                                    {
                                        <div class="points-info mb-3 p-3 border rounded bg-light">
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div>
                                                    <i class="fas fa-coins text-warning me-2"></i>
                                                    <strong>Your Points: @((ViewBag.UserPoints ?? 0).ToString("N0"))</strong>
                                                </div>
                                                <div>
                                                    <span class="badge @(Model.Price <= (ViewBag.UserPoints ?? 0) ? "bg-success" : "bg-danger")">
                                                        @(Model.Price <= (ViewBag.UserPoints ?? 0) ? "Sufficient" : "Insufficient")
                                                    </span>
                                                </div>
                                            </div>
                                            <div class="mt-2 text-muted small">
                                                <i class="fas fa-info-circle me-1"></i>
                                                Course cost: @Model.Price.ToString("N0") points
                                            </div>
                                        </div>
                                    }

                                    <button id="enrollBtn" class="btn btn-primary btn-lg w-100 mb-3 enroll-btn" onclick="enrollInCourse()">
                                        @if (Model.Price == 0)
                                        {
                                            <i class="fas fa-plus me-2"></i>
                                            <span>Enroll for Free</span>
                                        }
                                        else
                                        {
                                            <i class="fas fa-shopping-cart me-2"></i>
                                            <span>Enroll Now - @Model.Price.ToString("N0") Points</span>
                                        }
                                    </button>
                                    
                                    <!-- Take Course Button (hidden initially) -->
                                    <a id="takeCourseBtn" href="@Url.Action("Learn", "Course", new { courseId = Model.CourseId })" 
                                       class="btn btn-primary btn-lg w-100 mb-3" style="display: none;">
                                        <i class="fas fa-play me-2"></i>Take Course
                                    </a>
                                    
                                    <!-- Continue Course Button (hidden initially) -->
                                    <a id="continueCourseBtn" href="@Url.Action("Learn", "Course", new { courseId = Model.CourseId })"
                                       class="btn btn-outline-primary btn-lg w-100" style="display: none;">
                                        <i class="fas fa-play-circle me-2"></i>Continue Learning
                                    </a>
                                }                                
                                <div class="course-includes">
                                    <h6>This course includes:</h6>
                                    <ul class="includes-list">
                                        @if (Model.Chapters.SelectMany(c => c.Lessons).Any(l => l.LessonType == "Video"))
                                        {
                                            <li><i class="fas fa-video"></i> @Model.Chapters.SelectMany(c => c.Lessons).Count(l => l.LessonType == "Video") video lessons</li>
                                        }
                                        @if (Model.Chapters.SelectMany(c => c.Lessons).Any(l => l.LessonType == "Reading" || l.LessonType == "Article"))
                                        {
                                            <li><i class="fas fa-file-alt"></i> Articles and resources</li>
                                        }
                                        @if (Model.Chapters.SelectMany(c => c.Lessons).Any(l => l.LessonType == "Quiz"))
                                        {
                                            <li><i class="fas fa-question-circle"></i> @Model.Chapters.SelectMany(c => c.Lessons).Count(l => l.LessonType == "Quiz") quizzes</li>
                                        }
                                        <li><i class="fas fa-certificate"></i> Certificate of completion</li>
                                        @if (Model.EstimatedDuration > 0)
                                        {
                                            <li><i class="fas fa-clock"></i> @Model.EstimatedDuration hours of content</li>
                                        }
                                    </ul>
                                </div>

                                <div class="share-course mt-3">
                                    <h6>Share this course:</h6>
                                    <div class="share-buttons">
                                        <a href="#" class="share-btn facebook" data-share="facebook"><i
                                                class="fab fa-facebook-f"></i></a>
                                        <a href="#" class="share-btn twitter" data-share="twitter"><i
                                                class="fab fa-twitter"></i></a>
                                        <a href="#" class="share-btn linkedin" data-share="linkedin"><i
                                                class="fab fa-linkedin-in"></i></a>
                                        <a href="#" class="share-btn copy-link" data-share="copy"><i
                                                class="fas fa-link"></i></a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Course Content -->
        <div class="course-content">
            <div class="container">
                <div class="row">
                    <div class="col-lg-8">
                        <!-- Course Navigation Tabs -->
                        <div class="course-nav-tabs">
                            <ul class="nav nav-tabs" id="courseTab" role="tablist">
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link active" id="overview-tab" data-bs-toggle="tab"
                                        data-bs-target="#overview" type="button" role="tab">Overview</button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="curriculum-tab" data-bs-toggle="tab"
                                        data-bs-target="#curriculum" type="button" role="tab">Curriculum</button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="instructor-tab" data-bs-toggle="tab"
                                        data-bs-target="#instructor" type="button" role="tab">Instructor</button>
                                </li>
                                <li class="nav-item" role="presentation">
                                    <button class="nav-link" id="reviews-tab" data-bs-toggle="tab"
                                        data-bs-target="#reviews" type="button" role="tab">Reviews</button>
                                </li>
                            </ul>
                        </div>

                        <!-- Tab Content -->
                        <div class="tab-content" id="courseTabContent">                            <!-- Overview Tab -->
                            <div class="tab-pane fade show active" id="overview" role="tabpanel">
                                <div class="course-overview">
                                    <h3>Course Description</h3>
                                    <div class="course-description">
                                        @Html.Raw(Model.CourseDescription)
                                    </div>

                                    <h3>Course Details</h3>
                                    <div class="course-details-meta">
                                        <div class="row">
                                            <div class="col-md-6">
                                                <div class="detail-item">
                                                    <strong>Duration:</strong> @Model.EstimatedDuration hours
                                                </div>
                                                <div class="detail-item">
                                                    <strong>Level:</strong> @Model.DifficultyLevel
                                                </div>
                                                <div class="detail-item">
                                                    <strong>Students:</strong> @Model.TotalStudents
                                                </div>
                                            </div>
                                            <div class="col-md-6">
                                                <div class="detail-item">
                                                    <strong>Rating:</strong> @Model.AverageRating.ToString("F1")/5.0 (@Model.TotalReviews reviews)
                                                </div>
                                                <div class="detail-item">
                                                    <strong>Created:</strong> @Model.CourseCreatedAt.ToString("MMM dd, yyyy")
                                                </div>
                                                <div class="detail-item">
                                                    <strong>Last Updated:</strong> @Model.CourseUpdatedAt.ToString("MMM dd, yyyy")
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>                            <!-- Curriculum Tab -->
                            <div class="tab-pane fade" id="curriculum" role="tabpanel">
                                <div class="course-curriculum">
                                    <div class="curriculum-header">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <h3>Course Curriculum</h3>
                                                <p>@Model.Chapters.Count chapters • @Model.Chapters.Sum(c => c.Lessons.Count) lessons</p>
                                            </div>
                                            @if (ViewBag.IsAuthor == true)
                                            {
                                                <div>
                                                    <a href="@Url.Action("CreateChapter", "Chapter", new { courseId = Model.CourseId })" 
                                                       class="btn btn-primary">
                                                        <i class="fas fa-plus me-2"></i>Create Chapter
                                                    </a>
                                                </div>
                                            }
                                        </div>
                                    </div>

                                    <div class="curriculum-sections">
                                        @foreach (var chapter in Model.Chapters.OrderBy(c => c.ChapterOrder))
                                        {
                                            <div class="curriculum-section">
                                                <div class="section-header" data-bs-toggle="collapse"
                                                    data-bs-target="#chapter@(chapter.ChapterOrder)">
                                                    <h4>@chapter.ChapterOrder. @chapter.ChapterName</h4>
                                                    <div class="section-meta">
                                                        <span>@chapter.Lessons.Count lessons</span>
                                                        @if (ViewBag.IsAuthor == true)
                                                        {
                                                            <div class="chapter-actions me-3">
                                                                <button type="button" class="btn btn-sm btn-outline-primary me-2 edit-chapter-btn" 
                                                                        data-chapter-id="@chapter.ChapterId" 
                                                                        data-chapter-name="@chapter.ChapterName"
                                                                        title="Edit Chapter">
                                                                    <i class="fas fa-edit"></i>
                                                                </button>
                                                                <button type="button" class="btn btn-sm btn-outline-danger delete-chapter-btn" 
                                                                        data-chapter-id="@chapter.ChapterId" 
                                                                        data-chapter-name="@chapter.ChapterName"
                                                                        data-chapter-order="@chapter.ChapterOrder"
                                                                        title="Delete Chapter">
                                                                    <i class="fas fa-trash-alt"></i>
                                                                </button>
                                                            </div>
                                                        }
                                                        <i class="fas fa-chevron-down"></i>
                                                    </div>
                                                </div>
                                                <div class="collapse @(chapter.ChapterOrder == 1 ? "show" : "")" id="chapter@(chapter.ChapterOrder)">
                                                    <div class="section-content">
                                                        @if (!string.IsNullOrEmpty(chapter.ChapterDescription))
                                                        {
                                                            <div class="chapter-description">
                                                                <p>@chapter.ChapterDescription</p>
                                                            </div>
                                                        }
                                                        @{
                                                            var orderedLessons = chapter.Lessons.Where(l => l.LessonType != "Quiz").OrderBy(l => l.LessonOrder).ToList();
                                                            var lessonsByType = orderedLessons.GroupBy(l => l.LessonType).OrderBy(g => g.Key).ToList();
                                                            bool hasMoreThan5Items = (orderedLessons.Count + (chapter.Quizzes != null ? chapter.Quizzes.Count : 0)) > 5;
                                                        }
                                                        <div class="lessons-container @(hasMoreThan5Items ? "scrollable-lessons" : "")">
                                                            @* Display regular lessons *@
                                                            @foreach (var lessonGroup in lessonsByType)
                                                            {
                                                                <div class="mb-2">
                                                                    @foreach (var lesson in lessonGroup.OrderBy(l => l.LessonOrder))
                                                                    {
                                                                        <div class="lecture-item @(lesson.IsLocked ? "locked" : "")">
                                                                            <i class="fas @(lesson.LessonType == "Video" ? "fa-play-circle" : lesson.LessonType == "Text Lesson" ? "fa-file-text" : "fa-file-alt")"></i>
                                                                            <span class="lesson-name-truncated">@lesson.LessonName</span>
                                                                            <span class="lesson-type-with-icon">
                                                                                <i class="fas @(lesson.LessonType == "Video" ? "fa-play-circle" : lesson.LessonType == "Text Lesson" ? "fa-file-text" : "fa-file-alt")"></i>
                                                                                @lesson.LessonType
                                                                            </span>
                                                                            @if (ViewBag.IsAuthor == true)
                                                                            {
                                                                                <div class="lesson-actions">
                                                                                    <button type="button" class="btn btn-sm btn-outline-primary me-1 edit-lesson-btn" 
                                                                                            data-lesson-id="@lesson.LessonId" 
                                                                                            data-lesson-name="@lesson.LessonName"
                                                                                            title="Edit Lesson">
                                                                                        <i class="fas fa-edit"></i>
                                                                                    </button>
                                                                                    <button type="button" class="btn btn-sm btn-outline-danger delete-lesson-btn" 
                                                                                            data-lesson-id="@lesson.LessonId" 
                                                                                            data-lesson-name="@lesson.LessonName"
                                                                                            data-lesson-type="@lesson.LessonType"
                                                                                            title="Delete Lesson">
                                                                                        <i class="fas fa-trash-alt"></i>
                                                                                    </button>
                                                                                </div>
                                                                            }
                                                                            @if (lesson.IsLocked)
                                                                            {
                                                                                <i class="fas fa-lock lock-icon"></i>
                                                                            }
                                                                        </div>
                                                                    }
                                                                </div>
                                                            }
                                                            
                                                            @* Display quizzes separately *@
                                                            @if (chapter.Quizzes != null && chapter.Quizzes.Count > 0)
                                                            {
                                                                <div class="mb-2">
                                                                    @foreach (var quiz in chapter.Quizzes)
                                                                    {
                                                                        var (statusText, statusClass, statusIcon) = BusinessLogicLayer.Services.Implementations.QuizServiceImpl.GetQuizStatusInfo(quiz.QuizStatus);
                                                                        <div class="lecture-item quiz-item @(quiz.QuizStatus == 4 ? "archived-item" : "")">
                                                                            <i class="fas fa-question-circle"></i>
                                                                            <span class="lesson-name-truncated">@quiz.QuizName</span>
                                                                            <span class="lesson-type-with-icon">
                                                                                <i class="fas fa-question-circle"></i>
                                                                                Quiz
                                                                            </span>
                                                                            <span class="quiz-status-badge @statusClass">
                                                                                <i class="@statusIcon"></i>
                                                                                @statusText
                                                                            </span>
                                                                            @if (ViewBag.IsAuthor == true)
                                                                            {
                                                                                <div class="lesson-actions d-flex align-items-center">
                                                                                    <a href="/Quiz/Details/@quiz.QuizId" class="btn btn-sm btn-outline-primary me-1" title="Edit Quiz">
                                                                                        <i class="fas fa-edit"></i>
                                                                                    </a>
                                                                                    <a href="@Url.Action("ManageQuestions", "Quiz", new { quizId = quiz.QuizId })" 
                                                                                       class="btn btn-sm btn-outline-primary me-1"
                                                                                       title="Manage Questions">
                                                                                        <i class="fas fa-cog"></i>
                                                                                    </a>
                                                                                    @if (quiz.QuizStatus != 4) @* Don't show delete button for archived quizzes *@
                                                                                    {
                                                                                        <button type="button" class="btn btn-sm btn-outline-danger delete-quiz-btn" 
                                                                                                data-quiz-id="@quiz.QuizId" 
                                                                                                data-quiz-name="@quiz.QuizName"
                                                                                                data-course-id="@Model.CourseId"
                                                                                                data-quiz-status="@quiz.QuizStatus"
                                                                                                data-is-prerequisite="@quiz.IsPrerequisiteQuiz"
                                                                                                data-blocks-completion="@quiz.BlocksLessonCompletion"
                                                                                                title="Delete Quiz">
                                                                                            <i class="fas fa-trash-alt"></i>
                                                                                        </button>
                                                                                    }
                                                                                    else
                                                                                    {
                                                                                        <button type="button" class="btn btn-sm btn-outline-secondary" disabled title="Quiz is archived">
                                                                                            <i class="fas fa-archive"></i>
                                                                                        </button>
                                                                                    }
                                                                                </div>
                                                                            }
                                                                            @if (quiz.PassingScore.HasValue)
                                                                            {
                                                                                <span class="quiz-passing-score">
                                                                                    <i class="fas fa-target"></i> @quiz.PassingScore%
                                                                                </span>
                                                                            }
                                                                        </div>
                                                                    }
                                                                </div>
                                                            }
                                                        </div>
                                                        @if (hasMoreThan5Items)
                                                        {
                                                            <div class="lessons-scroll-indicator">
                                                                <small class="text-muted">
                                                                    <i class="fas fa-info-circle"></i>
                                                                    Scroll to see all @(orderedLessons.Count + (chapter.Quizzes != null ? chapter.Quizzes.Count : 0)) items
                                                                </small>
                                                            </div>
                                                        }
                                                        @if (ViewBag.IsAuthor == true)
                                                        {
                                                            <div class="lesson-actions mt-3 text-center" style="justify-content: center;">
                                                                <a href="@Url.Action("SelectLessonType", "Lesson", new { chapterId = chapter.ChapterId })" 
                                                                   class="btn btn-sm btn-outline-primary me-2">
                                                                    <i class="fas fa-plus me-2"></i>Create Lesson
                                                                </a>
                                                                <a href="@Url.Action("Create", "Quiz", new { chapterId = chapter.ChapterId })" 
                                                                   class="btn btn-sm btn-outline-success">
                                                                    <i class="fas fa-question-circle me-2"></i>Create Quiz
                                                                </a>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>                            <!-- Instructor Tab -->
                            <div class="tab-pane fade" id="instructor" role="tabpanel">
                                <div class="instructor-info">
                                    <div class="instructor-card">
                                        <div class="instructor-avatar">
                                            <img src="@Model.AuthorImage" alt="@Model.AuthorName"
                                                class="img-fluid rounded-circle"
                                                onerror="this.onerror=null; this.src='/SharedMedia/defaults/default-avatar.svg';">
                                        </div>
                                        <div class="instructor-details">
                                            <h3>@Model.AuthorName</h3>
                                            <p class="instructor-title">Course Instructor</p>
                                            <div class="instructor-stats">
                                                <div class="stat">
                                                    <span class="star-combined">
                                                        <i class="fas fa-star-half-alt star-left"></i>
                                                        <i class="fas fa-star-half-alt star-right"></i>
                                                    </span>
                                                    <span>@Model.AverageRating.ToString("F1") Instructor Rating</span>
                                                </div>
                                                <div class="stat">
                                                    <i class="fas fa-users"></i>
                                                    <span>@Model.TotalStudents Students</span>
                                                </div>
                                                <div class="stat">
                                                    <i class="fas fa-graduation-cap"></i>
                                                    <span>Course Author</span>
                                                </div>
                                            </div>
                                            <div class="instructor-bio">
                                                <p>An experienced professional passionate about teaching and helping students achieve their goals
                                                    through practical, hands-on learning experiences.</p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>                            <!-- Reviews Tab -->
                            <div class="tab-pane fade" id="reviews" role="tabpanel">
                                <div class="course-reviews">
                                    <div class="reviews-header">
                                        <h3>Student Reviews</h3>                                        <div class="rating-summary">                                            <div class="overall-rating">
                                                <span class="rating-number">@Model.AverageRating.ToString("F1")</span>
                                                <div class="rating-stars" data-rating="@Model.AverageRating.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)">
                                                    @{
                                                        var ratingValue = (double)Model.AverageRating;
                                                        // Special logic: ratings 0.1-0.9 show as half star only
                                                        double roundedRatingValue;
                                                        if (ratingValue > 0 && ratingValue < 1)
                                                        {
                                                            roundedRatingValue = 0.5; // Show only half star for ratings 0.1-0.9
                                                        }
                                                        else
                                                        {
                                                            roundedRatingValue = Math.Round(ratingValue * 2) / 2; // Round to nearest 0.5 for other values
                                                        }
                                                        
                                                        for (int i = 1; i <= 5; i++)
                                                        {
                                                            if (i <= Math.Floor(roundedRatingValue))
                                                            {
                                                                // Full star
                                                                <span class="star-combined">
                                                                    <i class="fas fa-star-half-alt star-left"></i>
                                                                    <i class="fas fa-star-half-alt star-right"></i>
                                                                </span>
                                                            }
                                                            else if (i - 0.5 <= roundedRatingValue)
                                                            {
                                                                // Half star
                                                                <span class="star-half">
                                                                    <i class="fas fa-star-half-alt"></i>
                                                                </span>
                                                            }
                                                            else
                                                            {
                                                                // Empty star
                                                                <span class="star-combined star-empty">
                                                                    <i class="fas fa-star-half-alt star-left"></i>
                                                                    <i class="fas fa-star-half-alt star-right"></i>
                                                                </span>
                                                            }
                                                        }
                                                    }
                                                </div>
                                                <span class="rating-count">(@Model.TotalReviews reviews)</span>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Create Review Form (Only for enrolled learners) -->
                                    @if (User.Identity?.IsAuthenticated == true && User.IsInRole("learner"))
                                    {
                                        <div id="create-review-section" class="create-review-section" style="display: none;">
                                            <div class="review-form-card">
                                            <h4><i class="fas fa-star"></i> Write a Review</h4>
                                            <form id="createReviewForm">
                                                <input type="hidden" id="courseId" name="courseId" value="@ViewBag.CourseId" />
                                                
                                                <div class="form-group mb-3">
                                                    <label class="form-label">Your Rating *</label>
                                                    <div class="rating-input">
                                                        <div class="star-rating-input" id="star-rating-input">
                                                            <input type="radio" id="star5" name="starRating" value="5" />
                                                            <label for="star5" class="star-label"><i class="fas fa-star"></i></label>
                                                            <input type="radio" id="star4" name="starRating" value="4" />
                                                            <label for="star4" class="star-label"><i class="fas fa-star"></i></label>
                                                            <input type="radio" id="star3" name="starRating" value="3" />
                                                            <label for="star3" class="star-label"><i class="fas fa-star"></i></label>
                                                            <input type="radio" id="star2" name="starRating" value="2" />
                                                            <label for="star2" class="star-label"><i class="fas fa-star"></i></label>
                                                            <input type="radio" id="star1" name="starRating" value="1" />
                                                            <label for="star1" class="star-label"><i class="fas fa-star"></i></label>
                                                        </div>
                                                        <span class="rating-text" id="rating-text">Click to rate</span>
                                                    </div>
                                                </div>

                                                <div class="form-group mb-3">
                                                    <label for="reviewComment" class="form-label">Your Review (optional)</label>
                                                    <textarea class="form-control" id="reviewComment" name="comment" rows="4" 
                                                            placeholder="Share your experience with this course..."></textarea>
                                                    <div class="character-count">
                                                        <span id="char-count">0</span>/1000 characters
                                                    </div>
                                                </div>

                                                <div class="form-group">
                                                    <button type="submit" class="btn btn-primary me-2" id="submitReviewBtn">
                                                        <i class="fas fa-paper-plane"></i> Submit Review
                                                    </button>
                                                    <button type="button" class="btn btn-secondary" id="cancelReviewBtn">
                                                        <i class="fas fa-times"></i> Cancel
                                                    </button>
                                                </div>
                                            </form>
                                        </div>
                                    </div>

                                        <!-- Review Action Buttons -->
                                        <div class="review-actions">
                                            <button id="writeReviewBtn" class="btn btn-outline-primary" style="display: none;">
                                                <i class="fas fa-edit"></i> Write a Review
                                            </button>
                                            <div id="review-eligibility-message" class="alert" style="display: none;"></div>
                                        </div>
                                    }
                                    else if (User.Identity?.IsAuthenticated == true && !User.IsInRole("learner"))
                                    {
                                        <div class="review-actions">
                                            <div class="alert alert-info">
                                                <i class="fas fa-info-circle"></i> Only enrolled learners can write reviews.
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="review-actions">
                                            <div class="alert alert-warning">
                                                <i class="fas fa-sign-in-alt"></i> Please <a href="/Auth/Login">log in</a> to write a review.
                                            </div>
                                        </div>
                                    }

                                    <!-- Reviews List -->
                                    <div class="reviews-list">
                                        @if (Model.Reviews != null && Model.Reviews.Any())
                                        {
                                            @foreach (var review in Model.Reviews.Take(10))
                                            {
                                                <div class="review-item">
                                                    <div class="reviewer-info">
                                                        <img src="@review.UserImage" alt="@review.UserName"
                                                            class="reviewer-avatar"
                                                            onerror="this.onerror=null; this.src='/SharedMedia/defaults/default-avatar.svg';">
                                                        <div class="reviewer-details">
                                                            <h5>@review.UserName</h5>
                                                            <div class="review-rating">
                                                                @{
                                                                    var reviewRating = (double)review.StarRating;
                                                                    // Special logic: ratings 0.1-0.9 show as half star only
                                                                    double roundedReviewRating;
                                                                    if (reviewRating > 0 && reviewRating < 1)
                                                                    {
                                                                        roundedReviewRating = 0.5; // Show only half star for ratings 0.1-0.9
                                                                    }
                                                                    else
                                                                    {
                                                                        roundedReviewRating = Math.Round(reviewRating * 2) / 2; // Round to nearest 0.5 for other values
                                                                    }
                                                                }
                                                                @for (int i = 1; i <= 5; i++)
                                                                {
                                                                    if (i <= Math.Floor(roundedReviewRating))
                                                                    {
                                                                        <span class="star-combined">
                                                                            <i class="fas fa-star-half-alt star-left"></i>
                                                                            <i class="fas fa-star-half-alt star-right"></i>
                                                                        </span>
                                                                    }
                                                                    else if (i - 0.5 <= roundedReviewRating)
                                                                    {
                                                                        <span class="star-half">
                                                                            <i class="fas fa-star-half-alt"></i>
                                                                        </span>
                                                                    }
                                                                    else
                                                                    {
                                                                        <span class="star-combined star-empty">
                                                                            <i class="fas fa-star-half-alt star-left"></i>
                                                                            <i class="fas fa-star-half-alt star-right"></i>
                                                                        </span>
                                                                    }
                                                                }
                                                            </div>
                                                            <span class="review-date">@review.ReviewDate.ToString("MMM dd, yyyy")</span>
                                                            @if (review.IsVerifiedPurchase)
                                                            {
                                                                <span class="verified-badge">
                                                                    <i class="fas fa-check-circle"></i> Verified Purchase
                                                                </span>
                                                            }
                                                        </div>
                                                    </div>
                                                    <div class="review-content">
                                                        <p>@review.ReviewComment</p>
                                                        @if (User.Identity?.IsAuthenticated == true && User.IsInRole("learner"))
                                                        {
                                                            var currentUserId = User.FindFirst("UserId")?.Value;
                                                            <!-- Debug info: Current User ID: @currentUserId, Review User ID: @review.UserId -->
                                                            if (currentUserId == review.UserId)
                                                            {
                                                                <div class="review-actions-buttons">
                                                                    <button class="btn btn-sm btn-outline-primary edit-review-btn" onclick="courseReviews.editReview('@review.ReviewId', @review.StarRating, '@Html.Raw(Html.Encode(review.ReviewComment ?? "").Replace("'", "\\'"))')">
                                                                        <i class="fas fa-edit"></i> Edit
                                                                    </button>
                                                                    <button class="btn btn-sm btn-outline-danger delete-review-btn" onclick="courseReviews.deleteReview('@review.ReviewId')">
                                                                        <i class="fas fa-trash"></i> Delete
                                                                    </button>
                                                                </div>
                                                            }
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <div class="no-reviews">
                                                <i class="fas fa-comment-slash"></i>
                                                <h4>No Reviews Yet</h4>
                                                <p>Be the first to review this course!</p>
                                            </div>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>                    <!-- Sidebar -->
                    <div class="col-lg-4">
                        <div class="course-sidebar">
                            <!-- Course Summary -->
                            <div class="sidebar-section">
                                <h4>Course Summary</h4>
                                <div class="course-summary-stats">
                                    <div class="stat-item">
                                        <i class="fas fa-users"></i>
                                        <span><strong>@Model.TotalStudents</strong> students enrolled</span>
                                    </div>
                                    <div class="stat-item">
                                        <span class="star-combined">
                                            <i class="fas fa-star-half-alt star-left"></i>
                                            <i class="fas fa-star-half-alt star-right"></i>
                                        </span>
                                        <span><strong>@Model.AverageRating.ToString("F1")</strong> average rating</span>
                                    </div>
                                    <div class="stat-item">
                                        <i class="fas fa-book"></i>
                                        <span><strong>@Model.Chapters.Count</strong> chapters</span>
                                    </div>
                                    <div class="stat-item">
                                        <i class="fas fa-play-circle"></i>
                                        <span><strong>@Model.Chapters.SelectMany(c => c.Lessons).Count()</strong> lessons</span>
                                    </div>
                                    @if (Model.EstimatedDuration > 0)
                                    {
                                        <div class="stat-item">
                                            <i class="fas fa-clock"></i>
                                            <span><strong>@Model.EstimatedDuration hours</strong> duration</span>
                                        </div>
                                    }
                                    <div class="stat-item">
                                        <i class="fas fa-signal"></i>
                                        <span><strong>@Model.DifficultyLevel</strong> level</span>
                                    </div>
                                </div>
                            </div>

                            <!-- Course Categories -->
                            @if (Model.Categories != null && Model.Categories.Any())
                            {
                                <div class="sidebar-section">
                                    <h4>Categories</h4>
                                    <div class="course-categories-list">
                                        @foreach (var category in Model.Categories)
                                        {
                                            <span class="category-tag">@category</span>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Footer -->
    @await Html.PartialAsync("~/Views/Shared/Footer/_Footer.cshtml")

    @* Include Chatbot for authenticated users *@
    @await Html.PartialAsync("~/Views/Shared/_Chatbot.cshtml")

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/global.js"></script>
    <script src="~/js/pages/Course/courses.js"></script>
    <script src="~/js/components/toast-notifications.js"></script>

    @* Chatbot Script for authenticated users *@
    @if (User.Identity?.IsAuthenticated == true)
    {
        @Html.AntiForgeryToken()
        <script src="~/js/components/chatbot.js"></script>
    }

    <!-- Chapter Management JavaScript -->
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Auto-navigate to specified tab if provided
            @if (!string.IsNullOrEmpty(ViewBag.ActiveTab))
            {
                <text>
                const activeTab = '@ViewBag.ActiveTab';
                const tabButton = document.querySelector(`[data-bs-target="#${activeTab}"]`);
                if (tabButton) {
                    const tab = new bootstrap.Tab(tabButton);
                    tab.show();
                    
                    // Update URL hash without triggering scroll
                    history.replaceState(null, null, `#${activeTab}`);
                    
                    // Scroll to the tab section after a short delay to ensure tab is rendered
                    setTimeout(() => {
                        const tabContent = document.getElementById(activeTab);
                        if (tabContent) {
                            tabContent.scrollIntoView({ behavior: 'smooth', block: 'start' });
                        }
                    }, 300);
                }
                </text>
            }

            // Edit Chapter functionality
            const editButtons = document.querySelectorAll('.edit-chapter-btn');
            editButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const chapterId = this.getAttribute('data-chapter-id');
                    const editUrl = '@Url.Action("EditChapter", "Chapter")' + '/' + chapterId;
                    window.location.href = editUrl;
                });
            });

            // Edit Lesson functionality
            const editLessonButtons = document.querySelectorAll('.edit-lesson-btn');
            editLessonButtons.forEach(button => {
                button.addEventListener('click', function() {
                    const lessonId = this.getAttribute('data-lesson-id');
                    const editUrl = '@Url.Action("EditLesson", "Lesson")' + '/' + lessonId;
                    window.location.href = editUrl;
                });
            });

            // Delete Chapter functionality
            const deleteButtons = document.querySelectorAll('.delete-chapter-btn');
            const deleteModal = new bootstrap.Modal(document.getElementById('deleteChapterModal'));
            let currentChapterId = null;

            deleteButtons.forEach(button => {
                button.addEventListener('click', function() {
                    currentChapterId = this.getAttribute('data-chapter-id');
                    const chapterName = this.getAttribute('data-chapter-name');
                    const chapterOrder = this.getAttribute('data-chapter-order');

                    // Update modal content
                    document.getElementById('deleteChapterName').textContent = chapterName;
                    document.getElementById('deleteChapterOrder').textContent = chapterOrder;

                    // Show modal
                    deleteModal.show();
                });
            });

            // Confirm delete action
            document.getElementById('confirmDeleteChapter').addEventListener('click', function() {
                if (!currentChapterId) return;

                // Show loading state
                this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Deleting...';
                this.disabled = true;

                // Create form and submit
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Action("DeleteChapter", "Chapter")';

                // Add anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (token) {
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token.value;
                    form.appendChild(tokenInput);
                }

                // Add chapter ID
                const idInput = document.createElement('input');
                idInput.type = 'hidden';
                idInput.name = 'id';
                idInput.value = currentChapterId;
                form.appendChild(idInput);

                // Add course ID for redirect
                const courseIdInput = document.createElement('input');
                courseIdInput.type = 'hidden';
                courseIdInput.name = 'courseId';
                courseIdInput.value = '@Model.CourseId';
                form.appendChild(courseIdInput);

                document.body.appendChild(form);
                form.submit();
            });

            // Reset modal when closed
            document.getElementById('deleteChapterModal').addEventListener('hidden.bs.modal', function() {
                currentChapterId = null;
                const confirmBtn = document.getElementById('confirmDeleteChapter');
                confirmBtn.innerHTML = '<i class="fas fa-trash-alt me-2"></i>Delete Chapter';
                confirmBtn.disabled = false;
            });

            // Delete Lesson functionality
            const deleteLessonButtons = document.querySelectorAll('.delete-lesson-btn');
            const deleteLessonModal = new bootstrap.Modal(document.getElementById('deleteLessonModal'));
            let currentLessonId = null;

            deleteLessonButtons.forEach(button => {
                button.addEventListener('click', function() {
                    currentLessonId = this.getAttribute('data-lesson-id');
                    const lessonName = this.getAttribute('data-lesson-name');
                    const lessonType = this.getAttribute('data-lesson-type');

                    // Update modal content
                    document.getElementById('deleteLessonName').textContent = lessonName;
                    document.getElementById('deleteLessonType').textContent = lessonType;

                    // Show modal
                    deleteLessonModal.show();
                });
            });

            // Confirm delete lesson action
            document.getElementById('confirmDeleteLesson').addEventListener('click', function() {
                if (!currentLessonId) return;

                // Show loading state
                this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Deleting...';
                this.disabled = true;

                // Create form and submit
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Action("DeleteLesson", "Lesson")';

                // Add anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (token) {
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token.value;
                    form.appendChild(tokenInput);
                }

                // Add lesson ID
                const idInput = document.createElement('input');
                idInput.type = 'hidden';
                idInput.name = 'id';
                idInput.value = currentLessonId;
                form.appendChild(idInput);

                // Add course ID for redirect
                const courseIdInput = document.createElement('input');
                courseIdInput.type = 'hidden';
                courseIdInput.name = 'courseId';
                courseIdInput.value = '@Model.CourseId';
                form.appendChild(courseIdInput);

                document.body.appendChild(form);
                form.submit();
            });

            // Reset lesson modal when closed
            document.getElementById('deleteLessonModal').addEventListener('hidden.bs.modal', function() {
                currentLessonId = null;
                const confirmBtn = document.getElementById('confirmDeleteLesson');
                confirmBtn.innerHTML = '<i class="fas fa-trash-alt me-2"></i>Delete Lesson';
                confirmBtn.disabled = false;
            });

            // Delete Quiz functionality
            const deleteQuizButtons = document.querySelectorAll('.delete-quiz-btn');
            const deleteQuizModal = new bootstrap.Modal(document.getElementById('deleteQuizModal'));
            let currentQuizId = null;
            let currentCourseId = null;

            deleteQuizButtons.forEach(button => {
                button.addEventListener('click', function() {
                    currentQuizId = this.getAttribute('data-quiz-id');
                    currentCourseId = this.getAttribute('data-course-id');
                    const quizName = this.getAttribute('data-quiz-name');
                    const quizStatus = this.getAttribute('data-quiz-status');
                    const isPrerequisite = this.getAttribute('data-is-prerequisite') === 'True';
                    const blocksCompletion = this.getAttribute('data-blocks-completion') === 'True';

                    // Check if quiz can be deleted
                    let cannotDeleteReason = '';
                    if (quizStatus === '1' || quizStatus === '2') {
                        cannotDeleteReason = 'This quiz is published/active and cannot be deleted. Please change the status to Draft first.';
                    } else if (isPrerequisite) {
                        cannotDeleteReason = 'This quiz is set as a prerequisite for course progression and cannot be deleted.';
                    } else if (blocksCompletion) {
                        cannotDeleteReason = 'This quiz blocks lesson completion and cannot be deleted. Please change the settings first.';
                    }

                    if (cannotDeleteReason) {
                        // Show error message instead of delete modal
                        if (window.showToast) {
                            window.showToast('error', cannotDeleteReason);
                        } else {
                            alert(cannotDeleteReason);
                        }
                        return;
                    }

                    // Update modal content
                    document.getElementById('deleteQuizName').textContent = quizName;

                    // Show modal
                    deleteQuizModal.show();
                });
            });

            // Confirm delete quiz action
            document.getElementById('confirmDeleteQuiz').addEventListener('click', function() {
                if (!currentQuizId || !currentCourseId) return;

                // Show loading state
                this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Deleting...';
                this.disabled = true;

                // Create form and submit
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '@Url.Action("DeleteQuiz", "Quiz")';

                // Add anti-forgery token
                const token = document.querySelector('input[name="__RequestVerificationToken"]');
                if (token) {
                    const tokenInput = document.createElement('input');
                    tokenInput.type = 'hidden';
                    tokenInput.name = '__RequestVerificationToken';
                    tokenInput.value = token.value;
                    form.appendChild(tokenInput);
                }

                // Add quiz ID
                const quizIdInput = document.createElement('input');
                quizIdInput.type = 'hidden';
                quizIdInput.name = 'quizId';
                quizIdInput.value = currentQuizId;
                form.appendChild(quizIdInput);

                // Add course ID for redirect
                const courseIdInput = document.createElement('input');
                courseIdInput.type = 'hidden';
                courseIdInput.name = 'courseId';
                courseIdInput.value = currentCourseId;
                form.appendChild(courseIdInput);

                document.body.appendChild(form);
                form.submit();
            });

            // Reset quiz modal when closed
            document.getElementById('deleteQuizModal').addEventListener('hidden.bs.modal', function() {
                currentQuizId = null;
                currentCourseId = null;
                const confirmBtn = document.getElementById('confirmDeleteQuiz');
                confirmBtn.innerHTML = '<i class="fas fa-trash-alt me-2"></i>Delete Quiz';
                confirmBtn.disabled = false;
            });

            // Handle request approval button click
            const requestApprovalBtn = document.getElementById('requestApprovalBtn');
            if (requestApprovalBtn) {
                requestApprovalBtn.addEventListener('click', function() {
                    const courseId = this.getAttribute('data-course-id');
                    if (!courseId) return;

                    // Show confirmation
                                            if (!confirm('Are you sure you want to request approval for this course? This will submit your course for review.')) {
                        return;
                    }

                    // Show loading state
                    const originalHtml = this.innerHTML;
                    this.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Submitting...';
                    this.disabled = true;

                    // Get anti-forgery token
                    const token = document.querySelector('input[name="__RequestVerificationToken"]');
                    const tokenValue = token ? token.value : '';

                    // Make AJAX request
                    fetch('@Url.Action("RequestCourseApproval", "Course")', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/x-www-form-urlencoded',
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: `courseId=${encodeURIComponent(courseId)}&__RequestVerificationToken=${encodeURIComponent(tokenValue)}`
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Show success message
                            if (window.showToast) {
                                window.showToast('success', data.message);
                            } else {
                                alert(data.message);
                            }
                            
                            // Reload page to update approval status
                            setTimeout(() => {
                                window.location.reload();
                            }, 1500);
                        } else {
                            // Show error message
                            if (window.showToast) {
                                window.showToast('error', data.message);
                            } else {
                                alert(data.message);
                            }
                            
                            // Reset button
                            this.innerHTML = originalHtml;
                            this.disabled = false;
                        }
                    })
                    .catch(error => {
                        if (window.showToast) {
                            window.showToast('error', 'An error occurred while submitting approval request');
                        } else {
                            alert('An error occurred while submitting approval request');
                        }
                        
                        // Reset button
                        this.innerHTML = originalHtml;
                        this.disabled = false;
                    });
                });
            }
        });
        
        // Initialize course player functionality for enrollment
        document.addEventListener('DOMContentLoaded', function() {
            const courseHashId = '@Model.CourseId';
            
            if (courseHashId && courseHashId !== '' && courseHashId !== 'undefined') {
                // Check enrollment status on page load
            } else {
            }
        });
        
        // Update enrollment UI for course details page
        function updateEnrollmentUI(enrollmentData) {
            const enrollBtn = document.getElementById('enrollBtn');
            const takeBtn = document.getElementById('takeCourseBtn');
            const continueBtn = document.getElementById('continueCourseBtn');
            
            if (enrollmentData.isEnrolled) {
                if (enrollBtn) enrollBtn.style.display = 'none';
                if (takeBtn) takeBtn.style.display = 'inline-block';
                if (continueBtn) continueBtn.style.display = 'inline-block';
            } else if (enrollmentData.canEnroll) {
                if (enrollBtn) {
                    enrollBtn.style.display = 'inline-block';
                    enrollBtn.disabled = false;
                }
                if (takeBtn) takeBtn.style.display = 'none';
                if (continueBtn) continueBtn.style.display = 'none';
            } else {
                if (enrollBtn) {
                    enrollBtn.disabled = true;
                    enrollBtn.innerHTML = '<i class="fas fa-lock"></i> Not Available';
                }
            }
        }
        
        // Enroll in course function for course details page
        function enrollInCourse() {
            const enrollBtn = document.getElementById('enrollBtn');
            if (enrollBtn) {
                enrollBtn.disabled = true;
                enrollBtn.innerHTML = '<i class="fas fa-spinner fa-spin me-2"></i>Processing...';
            }

            fetch('@Url.Action("EnrollInCourse", "Course")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: 'courseId=' + encodeURIComponent('@Model.CourseId')
            })
            .then(response => {
                if (response.redirected) {
                    // If response is a redirect, follow it
                    window.location.href = response.url;
                    return;
                }
                return response.json();
            })
            .then(data => {
                if (data && !data.success) {
                    // Show error message
                    if (window.showToast) {
                        if (data.message.includes('Insufficient points')) {
                            window.showToast('warning', data.message);
                        } else if (data.message.includes('Already enrolled')) {
                            window.showToast('info', data.message);
                        } else {
                            window.showToast('error', data.message);
                        }
                    } else {
                        alert(data.message);
                    }
                    
                    // Re-enable button
                    if (enrollBtn) {
                        enrollBtn.disabled = false;
                        if (@Model.Price == 0) {
                            enrollBtn.innerHTML = '<i class="fas fa-plus me-2"></i>Enroll for Free';
                        } else {
                            enrollBtn.innerHTML = '<i class="fas fa-shopping-cart me-2"></i>Enroll Now - @Model.Price.ToString("N0") Points';
                        }
                    }
                } else if (data && data.success) {
                    // Show success message and refresh page
                    if (window.showToast) {
                        window.showToast('success', data.message);
                    }
                    
                    // Refresh page after short delay to show updated enrollment status
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                }
            })
            .catch(error => {
                if (window.showToast) {
                    window.showToast('error', 'An error occurred while enrolling');
                } else {
                    alert('An error occurred while enrolling');
                }
                
                // Re-enable button
                if (enrollBtn) {
                    enrollBtn.disabled = false;
                    if (@Model.Price == 0) {
                        enrollBtn.innerHTML = '<i class="fas fa-plus me-2"></i>Enroll for Free';
                    } else {
                        enrollBtn.innerHTML = '<i class="fas fa-shopping-cart me-2"></i>Enroll Now - @Model.Price.ToString("N0") Points';
                    }
                }
            });
        }
    </script>

    <!-- Course Reviews JavaScript -->
    <script src="~/js/pages/Course/course-reviews.js"></script>
    
    <script>
        // Initialize CourseReviews
        let courseReviews;
        document.addEventListener('DOMContentLoaded', function() {
            courseReviews = new CourseReviews('@Model.CourseId');
        });
    </script>

    <!-- Enrollment Success Modal -->
    <div class="modal fade" id="enrollmentModal" tabindex="-1" aria-labelledby="enrollmentModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="enrollmentModalLabel">Enrollment Status</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="enrollmentMessage"></div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="continueLearning" style="display: none;">Continue
                        Learning</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Chapter Confirmation Modal -->
    <div class="modal fade" id="deleteChapterModal" tabindex="-1" aria-labelledby="deleteChapterModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteChapterModalLabel">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Delete Chapter
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-warning me-2"></i>
                        <strong>Warning:</strong> This action cannot be undone!
                    </div>
                    <p>Are you sure you want to delete the following chapter?</p>
                    <div class="bg-light p-3 rounded">
                        <h6 class="mb-1"><strong id="deleteChapterName">Chapter Name</strong></h6>
                        <small class="text-muted">Chapter <span id="deleteChapterOrder">1</span> in this course</small>
                    </div>
                    <div class="mt-3">
                        <p class="text-danger mb-0">
                            <i class="fas fa-info-circle me-1"></i>
                            All lessons within this chapter will also be permanently deleted.
                        </p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteChapter">
                        <i class="fas fa-trash-alt me-2"></i>Delete Chapter
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Lesson Confirmation Modal -->
    <div class="modal fade" id="deleteLessonModal" tabindex="-1" aria-labelledby="deleteLessonModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteLessonModalLabel">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Delete Lesson
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-warning me-2"></i>
                        <strong>Warning:</strong> This action cannot be undone!
                    </div>
                    <p>Are you sure you want to delete the following lesson?</p>
                    <div class="bg-light p-3 rounded">
                        <h6 class="mb-1"><strong id="deleteLessonName">Lesson Name</strong></h6>
                        <small class="text-muted"><span id="deleteLessonType">Video</span> lesson</small>
                    </div>
                    <div class="mt-3">
                        <p class="text-danger mb-0">
                            <i class="fas fa-info-circle me-1"></i>
                            This lesson and all its content will be permanently deleted.
                        </p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteLesson">
                        <i class="fas fa-trash-alt me-2"></i>Delete Lesson
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Quiz Confirmation Modal -->
    <div class="modal fade" id="deleteQuizModal" tabindex="-1" aria-labelledby="deleteQuizModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title" id="deleteQuizModalLabel">
                        <i class="fas fa-exclamation-triangle me-2"></i>
                        Delete Quiz
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="alert alert-warning">
                        <i class="fas fa-warning me-2"></i>
                        <strong>Warning:</strong> This action cannot be undone!
                    </div>
                    <p>Are you sure you want to delete the following quiz?</p>
                    <div class="bg-light p-3 rounded">
                        <h6 class="mb-1"><strong id="deleteQuizName">Quiz Name</strong></h6>
                        <small class="text-muted">Chapter quiz with all questions</small>
                    </div>
                    <div class="mt-3">
                        <p class="text-danger mb-0">
                            <i class="fas fa-info-circle me-1"></i>
                            This quiz and all its questions will be permanently deleted. You will be able to create lessons again after deleting the quiz.
                        </p>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                        <i class="fas fa-times me-2"></i>Cancel
                    </button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteQuiz">
                        <i class="fas fa-trash-alt me-2"></i>Delete Quiz
                    </button>
                </div>
            </div>
        </div>
    </div>
</body>

</html>

