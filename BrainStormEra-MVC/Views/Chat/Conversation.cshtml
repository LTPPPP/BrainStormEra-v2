@model BrainStormEra_MVC.Controllers.ChatViewModel
@{
    ViewData["Title"] = "Conversation";
    var otherUser = Model.OtherParticipants.FirstOrDefault();
    var chatName = otherUser?.FullName ?? "Conversation";
    var currentUserId = Model.CurrentUserId;
}

<div class="container-fluid">
    <div class="chat-container">
        <div class="chat-sidebar">
            <div class="chat-sidebar-header">
                <h4>Conversations</h4>
                <a asp-action="Users" class="btn btn-sm btn-primary">
                    <i class="bi bi-plus-circle"></i> New
                </a>
            </div>

            <div class="chat-search">
                <input type="text" placeholder="Search conversations..." id="conversationSearch">
            </div>

            <div class="chat-conversations" id="conversationsList">
                <a asp-action="Index" class="chat-conversation-item">
                    <div class="chat-avatar">
                        <i class="bi bi-arrow-left"></i>
                    </div>
                    <div class="chat-conversation-content">
                        <div class="chat-conversation-name">Back to conversations</div>
                    </div>
                </a>
                <!-- Recent conversations will be loaded here -->
            </div>
        </div>

        <div class="chat-main">
            <div class="chat-header">
                <a href="javascript:void(0);" class="back-to-conversations chat-header-icon">
                    <i class="bi bi-arrow-left"></i>
                </a>
                <div class="chat-avatar">
                    @if (otherUser != null)
                    {
                        <span>@otherUser.FullName?.Substring(0, 1).ToUpper()</span>
                    }
                    else
                    {
                        <i class="bi bi-people"></i>
                    }
                </div>
                <div class="chat-header-info">
                    <div class="chat-header-name">@chatName</div>
                </div>
                <div class="chat-header-actions">
                    <a asp-action="Index" class="chat-header-icon">
                        <i class="bi bi-house"></i>
                    </a>
                </div>
            </div>

            <div class="chat-messages" id="messageContainer">
                @if (Model.Messages != null && Model.Messages.Any())
                {
                    foreach (var message in Model.Messages)
                    {
                        var isCurrentUser = message.SenderId == currentUserId;
                        var messageClass = isCurrentUser ? "message-sent" : "message-received";

                        <div class="message @messageClass" data-message-id="@message.MessageId">
                            <div class="message-content">
                                <div class="message-text">@message.MessageContent</div>
                                <div class="message-time">
                                    @message.MessageCreatedAt.ToString("HH:mm")
                                    @if (isCurrentUser)
                                    {
                                        if (message.IsRead == true)
                                        {
                                            <span class="message-status status-read"><i class="bi bi-check2-all"></i></span>
                                        }
                                        else
                                        {
                                            <span class="message-status status-delivered"><i class="bi bi-check2"></i></span>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="chat-empty-state">
                        <i class="bi bi-chat-dots chat-empty-icon"></i>
                        <div class="chat-empty-title">No messages yet</div>
                        <div class="chat-empty-subtitle">Send your first message to start a conversation</div>
                    </div>
                }
            </div>

            <div class="message-input-container">
                <form id="messageForm" class="message-input-form">
                    <input type="hidden" id="conversationId" value="@Model.Conversation.ConversationId" />
                    <input type="hidden" id="currentUserId" value="@currentUserId" />
                    <input type="hidden" id="receiverId" value="@(otherUser?.UserId ?? "")" />

                    <input type="text" id="messageInput" class="message-input" placeholder="Type a message..." required
                        autocomplete="off">
                    <button type="submit" class="message-send-button">
                        <i class="bi bi-send-fill"></i>
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Styles {
    <link rel="stylesheet" href="~/css/pages/Chat/messenger.css">
}

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.js"></script>
    <script src="~/js/pages/Chat/chat.js"></script>

    <script>
        // DOM elements
        const messageForm = document.getElementById("messageForm");
        const messageInput = document.getElementById("messageInput");
        const messageContainer = document.getElementById("messageContainer");
        const conversationsList = document.getElementById("conversationsList");
        const conversationSearch = document.getElementById("conversationSearch");
        const conversationId = document.getElementById("conversationId").value;
        const currentUserId = document.getElementById("currentUserId").value;
        const receiverId = document.getElementById("receiverId").value;

        // Mobile responsive handling
        const backToConversationsBtn = document.querySelector('.back-to-conversations');
        if (backToConversationsBtn) {
            backToConversationsBtn.addEventListener('click', function () {
                document.querySelector('.chat-container').classList.add('show-sidebar');
            });
        }

        // Function to add a new message to the UI
        function appendMessage(message) {
            const isCurrentUser = message.senderId === currentUserId;
            const messageClass = isCurrentUser ? "message-sent" : "message-received";

            const messageDiv = document.createElement("div");
            messageDiv.className = `message ${messageClass}`;
            messageDiv.dataset.messageId = message.messageId;

            messageDiv.innerHTML = `
                        <div class="message-content">
                            <div class="message-text">${message.messageContent}</div>
                            <div class="message-time">
                                ${new Date(message.messageCreatedAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                ${isCurrentUser ? '<span class="message-status status-delivered"><i class="bi bi-check2"></i></span>' : ''}
                            </div>
                        </div>
                    `;

            messageContainer.appendChild(messageDiv);
            scrollToBottom();
        }

        // Function to mark a message as read in the UI
        function markAsRead(messageId) {
            const messageElements = document.querySelectorAll(`[data-message-id="${messageId}"]`);
            messageElements.forEach(el => {
                const statusIcon = el.querySelector('.message-status i');
                if (statusIcon) {
                    statusIcon.className = 'bi bi-check2-all';
                    el.querySelector('.message-status').className = 'message-status status-read';
                }
            });
        }

        // Function to scroll to the bottom of the message container
        function scrollToBottom() {
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        // Function to load recent conversations
        async function loadRecentConversations() {
            try {
                const response = await fetch(`/Chat/GetRecentConversations?userId=${currentUserId}`);
                if (response.ok) {
                    const conversations = await response.json();

                    // Clear existing conversations (except the back link)
                    const backLink = conversationsList.querySelector('a[asp-action="Index"]');
                    conversationsList.innerHTML = '';
                    conversationsList.appendChild(backLink);

                    // Add conversations
                    conversations.forEach(conv => {
                        const isActive = conv.conversationId === conversationId;
                        const hasUnread = conv.unreadMessageCount > 0;

                        const convElement = document.createElement('div');
                        convElement.className = `chat-conversation-item${isActive ? ' active' : ''}`;
                        convElement.innerHTML = `
                                    <div class="chat-avatar">
                                        <span>${conv.otherParticipant.fullName.substring(0, 1).toUpperCase()}</span>
                                    </div>
                                    <div class="chat-conversation-content">
                                        <div class="chat-conversation-name">${conv.otherParticipant.fullName}</div>
                                        <div class="chat-conversation-message">${conv.lastMessage ? conv.lastMessage.messageContent : 'Start a conversation'}</div>
                                    </div>
                                    ${hasUnread ? `<div class="chat-unread-badge">${conv.unreadMessageCount}</div>` : ''}
                                    <div class="chat-conversation-time">${conv.lastMessage ? new Date(conv.lastMessage.messageCreatedAt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }) : ''}</div>
                                `;

                        convElement.addEventListener('click', () => {
                            window.location.href = `/Chat/Conversation/${conv.conversationId}`;
                        });

                        conversationsList.appendChild(convElement);
                    });
                }
            } catch (error) {
                // Error loading recent conversations
            }
        }

        // Filter conversations by search term
        conversationSearch.addEventListener('input', function () {
            const searchTerm = this.value.toLowerCase();
            const conversations = conversationsList.querySelectorAll('.chat-conversation-item:not([asp-action="Index"])');

            conversations.forEach(conv => {
                const name = conv.querySelector('.chat-conversation-name').textContent.toLowerCase();
                const message = conv.querySelector('.chat-conversation-message')?.textContent.toLowerCase() || '';

                if (name.includes(searchTerm) || message.includes(searchTerm)) {
                    conv.style.display = 'flex';
                } else {
                    conv.style.display = 'none';
                }
            });
        });

        // Initialize chat service
        const chatService = new ChatService('/chatHub');

        // Set up callbacks
        chatService.setCallbacks({
            onMessageReceived: (message) => {
                appendMessage(message);

                // If the message is from another user, mark it as read
                if (message.senderId !== currentUserId) {
                    chatService.markMessageAsRead(message.messageId, currentUserId);
                }

                // Refresh conversation list to show latest message
                loadRecentConversations();
            },
            onMessageRead: (messageId) => {
                markAsRead(messageId);
            },
            onConnectionStarted: async () => {
                // Join the conversation group
                await chatService.joinConversation(conversationId);
                scrollToBottom();

                // Load recent conversations
                loadRecentConversations();
            }
        });

        // Handle form submission - sending a new message
        messageForm.addEventListener("submit", async (e) => {
            e.preventDefault();

            const content = messageInput.value.trim();
            if (!content) return;

            try {
                await chatService.sendMessage(conversationId, currentUserId, receiverId, content);
                messageInput.value = "";
                messageInput.focus();
            } catch (err) {
                // Failed to send message
                alert("Failed to send message. Please try again.");
            }
        });

        // Initialize the chat service
        chatService.initialize();

        // Scroll to bottom on page load
        window.addEventListener('load', scrollToBottom);

        // Set up notification for when user is leaving the page
        window.addEventListener('beforeunload', async () => {
            await chatService.leaveConversation(conversationId);
        });
    </script>
}